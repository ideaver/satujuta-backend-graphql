// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://satujuta:satujuta123456@103.163.139.104:3306/satujuta"
}

// generator nestgraphql {
//   provider               = "node node_modules/prisma-nestjs-graphql"
//   output                 = "../src/@generated/prisma-nestjs-graphql"
//   fields_Validator_from  = "class-validator"
//   fields_Validator_input = true
// }

generator custom_generator {
  provider = "prisma-generator-fake-data"
  output   = "./fake-data.ts"
}

generator nestgraphql {
  provider                              = "node node_modules/prisma-nestjs-graphql"
  output                                = "../src/@generated"
  fields_Validator_from                 = "class-validator"
  fields_Validator_input                = true
  requireSingleFieldsInWhereUniqueInput = true
  emitSingle                            = true
  emitCompiled                          = true
  purgeOutput                           = true
  noTypeId                              = true
}

enum UserRole {
  MEMBER
  ADMIN
  SUPERUSER
  STUDENT
}

enum UserType {
  PARENT
  SCHOOL_HEAD
  STUDENT
  TEACHER
  HOUSEWIFE
  ENTREPRENEUR
  WORKER
  OTHER
}

enum Theme {
  LIGHT
  DARK
}

model Province {
  id      Int       @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.IsNotEmpty()
  name    String    @unique
  /// @HideField()   
  cities  City[]
  /// @HideField()   
  address Address[] @relation("ProvinceAddress")
}

//Make CRUD Available
model City {
  id         Int        @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.IsNotEmpty()
  name       String
  province   Province   @relation(fields: [provinceId], references: [id])
  provinceId Int
  districts  District[]
  /// @HideField()   
  address    Address[]  @relation("CityAddress")
}

//Make CRUD Available
model District {
  id           Int           @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.IsNotEmpty()
  name         String
  city         City          @relation(fields: [cityId], references: [id])
  cityId       Int
  subdistricts Subdistrict[]
  /// @HideField()   
  address      Address[]     @relation("DistrictAddress")
}

model Subdistrict {
  id         Int       @id @default(autoincrement())
  name       String
  district   District  @relation(fields: [districtId], references: [id])
  districtId Int
  /// @Validator.MinLength(3)
  /// @Validator.IsPostalCode('ID')
  postalCode String
  /// @HideField()
  address    Address[] @relation("SubdistrictAddress")
}

//Make CRUD Available
model Address {
  /// @HideField({ match: 'AddressCreate*Input' })
  id            Int         @id @default(autoincrement())
  /// @Validator.MinLength(5)
  /// @Validator.IsNotEmpty()
  name          String
  /// @Validator.IsNotEmpty()
  province      Province    @relation("ProvinceAddress", fields: [provinceId], references: [id])
  /// @HideField({ match: 'AddressCreate*Input' })
  provinceId    Int
  /// @Validator.IsNotEmpty()
  city          City        @relation("CityAddress", fields: [cityId], references: [id])
  /// @HideField({ match: 'AddressCreate*Input' })
  cityId        Int
  /// @Validator.IsNotEmpty()
  district      District    @relation("DistrictAddress", fields: [districtId], references: [id])
  /// @HideField({ match: 'AddressCreate*Input' })
  districtId    Int
  /// @Validator.IsNotEmpty()
  subdistrict   Subdistrict @relation("SubdistrictAddress", fields: [subdistrictId], references: [id])
  // @HideField({ match: 'AddressCreate*Input' })
  subdistrictId Int
  /// @HideField({ match: 'AddressCreate*Input' })
  user          User?
  /// @HideField({ match: 'AddressCreate*Input' })
  hotel         Hotel?
  /// @HideField({ match: 'AddressCreate*Input' })
  school        School?
  /// @HideField({ match: 'AddressCreate*Input' })
  Shipping      Shipping?
  /// @HideField({ match: 'AddressCreate*Input' })
  createdAt     DateTime    @default(now())
  /// @HideField({ match: 'AddressCreate*Input' })
  updatedAt     DateTime    @updatedAt
}

//Make CRUD Available
model School {
  /// @HideField({ match: ['SchoolCreate*Input','SchoolUpdate*Input']})
  id        Int      @id @default(autoincrement())
  /// @Validator.MinLength(5)
  /// @Validator.IsAlphanumeric()
  name      String
  address   Address  @relation(fields: [addressId], references: [id])
  /// @HideField({ output: false, input: true })  
  addressId Int      @unique
  /// @HideField({ match: ['SchoolCreate*Input','SchoolUpdate*Input']})
  createdAt DateTime @default(now())
  /// @HideField({ match: ['SchoolCreate*Input','SchoolUpdate*Input']})
  updatedAt DateTime @updatedAt
  /// @HideField({ match: ['SchoolCreate*Input','SchoolUpdate*Input']})
  students  User[]   @relation("StudentSchool")
}

//Make CRU Available, implement soft delete
/// @ObjectType('UserAbstract', { isAbstract: true })
model User {
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
  id                    String              @id @default(uuid())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlpha()
  /// @Validator.IsNotEmpty()
  firstName             String
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlpha()
  /// @Validator.IsNotEmpty()
  lastName              String?
  /// @Validator.IsEmail()
  email                 String              @unique
  /// @Validator.IsNotEmpty(g
  address               Address             @relation(fields: [addressId], references: [id])
  addressId             Int                 @unique
  /// @HideField({ match: 'UserUpdate*Input' })
  userRole              UserRole            @default(MEMBER)
  userType              UserType
  /// @Validator.IsUrl({ require_protocol: true })
  avatarUrl             String?
  /// @Validator.IsNotEmpty()
  whatsappNumber        String              @unique
  /// @HideField({ match: 'UserCreate*Input' })      
  whatsappVerifiedAt    DateTime?
  /// @Validator.MinLength(6)
  /// @Validator.MaxLength(15)
  /// @Validator.IsAlphanumeric()
  /// @HideField({ output: true, input: false })
  password              String
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
  referralCode          String              @unique
  /// @HideField({ match: 'UserUpdate*Input' }) 
  referredBy            User?               @relation("UserReferral", fields: [referredById], references: [id])
  /// @HideField({ output: false, input: true })   
  referredById          String?
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})  
  referredUsers         User[]              @relation("UserReferral")
  /// @HideField({ match: 'UserCreate*Input' })
  status                UserStatus          @default(PENDING)
  /// @HideField({ match: 'UserCreate*Input' })
  checkIns              CheckIn[]
  school                School?             @relation("StudentSchool", fields: [schoolId], references: [id])
  schoolId              Int?
  /// @HideField({ match: 'UserUpdate*Input' })
  accounts              Account[]
  /// @HideField({ output: false, input: true })   
  PointTransactions     PointTransaction[]
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
  createdAt             DateTime            @default(now())
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']}) 
  updatedAt             DateTime            @updatedAt
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']}) 
  deletedAt             DateTime?
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']}) 
  orders                Order[]
  /// @HideField({ output: false, input: true })   
  sessions              Session[]
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']}) 
  hotelsCreated         Hotel[]
  /// @HideField({ match: 'UserCreate*Input' })  
  programsParticipation Program[]           @relation("participant")
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
  claimedRewards        RewardClaim[]
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})  
  withdrawalRequest     WithdrawalRequest[]
  /// @HideField({ output: false, input: true })   
  userNotifications     UserNotification[]
  /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})  
  programsCreated       Program[]
  /// @HideField({ output: false, input: true })   
  filesCreated          File[]
  theme                 Theme               @default(LIGHT)
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

//Member dapat memiliki akun bernama member account, investment account, comission account dan cash account
//superuser memiliki akun bernama platform account dan juga cash account
//Make CRUD Available
model Account {
  id                     Int             @id @default(autoincrement())
  accountNumber          Float?
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlpha()
  name                   String
  /// @HideField({ output: false, input: true })
  createdAt              DateTime        @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt              DateTime        @updatedAt
  user                   User            @relation(fields: [userId], references: [id])
  userId                 String
  accountCategory        AccountCategory
  /// @HideField({ match: 'AccountCreate*Input' })
  transactionOrigins     Transaction[]   @relation("origin")
  /// @HideField({ match: 'AccountCreate*Input' })
  transactionDestination Transaction[]   @relation("destination")
  /// @HideField({ output: false, input: true })
  project                Project?
  /// @HideField({ output: false, input: true })
  bankAccount            Bank?
}

enum AccountCategory {
  EQUITY
  PROJECT
  COMISSION
  CASH
  PLATFORM
  BANK
  DEBT
}

//Make Read only without update, delete
model Transaction {
  id                  Int                 @id @default(autoincrement())
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  amount              Float
  proofUrl            String?
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})     
  status              TransactionStatus
  transactionCategory TransactionCategory
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  fromAccount         Account             @relation("origin", fields: [fromAccountId], references: [id])
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})  
  fromAccountId       Int
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})  
  toAccount           Account             @relation("destination", fields: [toAccountId], references: [id])
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})  
  toAccountId         Int
  invoice             Invoice?            @relation(fields: [invoiceId], references: [id])
  invoiceId           Int?
  /// @HideField({ output: false, input: true })   
  Installment         Installment?        @relation(fields: [installmentId], references: [id])
  /// @HideField({ match: 'TransactionUpdate*Input' })
  installmentId       Int?                @unique
  /// @HideField({ match: 'TransactionUpdate*Input' })
  withdrawalRequest   WithdrawalRequest?  @relation(fields: [withdrawalRequestId], references: [id])
  /// @HideField({ match: 'TransactionUpdate*Input' })
  withdrawalRequestId Int?                @unique
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  uniqueCode          Int
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  createdAt           DateTime            @default(now())

  @@index([amount], name: "amount")
  @@index([fromAccountId], name: "from_account_id")
  @@index([toAccountId], name: "to_account_id")
  @@index([createdAt], name: "created_at")
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionCategory {
  INVESTMENT
  INVESTMENT_RETURN
  COMISSION_BONUS
  WITHDRAWAL
  MEMBER_REGISTRATION
  STUDENT_REGISTRATION
}

//Make Read only without update, delete
model PointTransaction {
  id              Int             @id @default(autoincrement())
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  amount          Float
  pointType       PointType
  transactionType TransactionType
  currentBalance  Float           @default(0)
  User            User            @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime        @default(now())
}

enum PointType {
  REFERRING
  REDEEMING
}

enum TransactionStatus {
  PROCESSING
  PENDING
  FAILED
  CANCELLED
  COMPLETED
}

model WithdrawalRequest {
  id            Int               @id @default(autoincrement())
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  amount        Float
  status        TransactionStatus
  transaction   Transaction?
  transactionId Int?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

//Make Read only without update, delete
model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  device    String
  ipAddress Float
}

//Make CRU Available, implement soft delete
model UserNotification {
  id        Int                      @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  title     String
  subtitle  String
  /// @Validator.IsNotEmpty()
  content   String
  createdAt DateTime                 @default(now())
  category  UserNotificationCategory
  isRead    Boolean                  @default(false)
  isCleared Boolean                  @default(false)
  user      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  deepLink  String?
  fcmToken  String?
}

enum UserNotificationCategory {
  BILLING_ALERT
  ANNOUNCEMENT
  CHAT_MESSAGE
}

//Make CRUD Available
model Bank {
  id            Int     @id @default(autoincrement())
  /// @Validator.MinLength(1)
  /// @Validator.MaxLength(10)
  /// @Validator.IsAlphanumeric()
  /// @Validator.IsNotEmpty()
  name          String
  /// @Validator.IsUrl({ require_protocol: true })
  /// @Validator.IsNotEmpty()
  logoUrl       String
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  accountNumber Float
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlpha()
  /// @HideField({ output: false, input: true })
  account       Account @relation(fields: [accountId], references: [id])
  /// @HideField({ output: false, input: true })
  accountId     Int     @unique
}

//Make CRUD Available
model Hotel {
  /// @HideField({ match: 'HotelCreate*Input' }) 
  id          Int       @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlphanumeric()
  name        String
  address     Address   @relation(fields: [addressId], references: [id])
  /// @HideField({ match: 'HotelCreate*Input' })
  addressId   Int       @unique
  /// @Validator.MinLength(10)
  /// @Validator.IsNotEmpty()
  description String
  /// @Validator.IsNotEmpty()
  images      Images[]
  /// @Validator.IsNumber()
  /// @Validator.IsNotEmpty() 
  rating      Float
  /// @Validator.IsDate()
  /// @Validator.IsNotEmpty()
  startDate   DateTime
  /// @Validator.IsNumber()
  /// @Validator.IsNotEmpty() 
  quota       Int
  /// @HideField({ match: 'HotelCreate*Input' })
  checkIns    CheckIn[]
  /// @Validator.IsNotEmpty()
  createdBy   User      @relation(fields: [createdById], references: [id])
  /// @HideField({ match: 'HotelCreate*Input' })
  createdById String
  /// @HideField({ match: 'HotelCreate*Input' })
  createdAt   DateTime  @default(now())
  /// @HideField({ match: 'HotelCreate*Input' })
  updatedAt   DateTime  @updatedAt
}

//Make CRUD Available
model CheckIn {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  userId    String
  hotelId   Int
  checkInAt DateTime @default(now())
  /// @HideField({ output: false, input: true }) 
  createdAt DateTime @default(now())
  /// @HideField({ output: false, input: true }) 
  updatedAt DateTime @updatedAt
}

//Make CRU Available, cannot be deleted
model Order {
  id          Int               @id @default(autoincrement())
  status      TransactionStatus
  orderBy     User              @relation(fields: [orderById], references: [id])
  orderById   String            @unique
  cart        Cart[]
  shipping    Shipping?
  shippingId  Int?
  invoice     Invoice           @relation(fields: [invoiceId], references: [id])
  invoiceId   Int               @unique
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  platformFee Float
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  total       Float
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Cart {
  id               Int      @id @default(autoincrement())
  order            Order    @relation(fields: [orderId], references: [id])
  orderId          Int
  membershipItem   Item?    @relation(fields: [membershipItemId], references: [id])
  membershipItemId Int?
  projectItem      Project? @relation(fields: [projectItemId], references: [id])
  projectItemId    Int?
  quantity         Int
  /// @Validator.IsNumber() 
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  price            Float
  /// @Validator.IsNumber() 
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  cost             Float
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  createdAt        DateTime @default(now())
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  updatedAt        DateTime @updatedAt
}

//Make CRUD Available
//Setiap user role memiliki pilihan item sesuai user rolenya
model Item {
  id          Int      @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(30)
  name        String
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(30)
  description String
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  price       Float
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  cost        Float
  userRole    UserRole
  cart        Cart[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//Make CRUD Available
model Shipping {
  id             Int            @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlphanumeric()
  logisticName   String
  deliveryDate   DateTime?
  /// @HideField({ match: 'Shipping*Input' })
  shippingStatus ShippingStatus
  /// @HideField({ match: 'ShippingCreate*Input' })
  address        Address        @relation(fields: [addressId], references: [id])
  /// @HideField({ match: 'Shipping*Input' })
  addressId      Int            @unique
  courier        String?
  estimatedTime  String?
  trackingNo     String?
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        Int            @unique
  /// @HideField({ match: 'Shipping*Input' })
  createdAt      DateTime       @default(now())
  /// @HideField({ match: 'Shipping*Input' })
  updatedAt      DateTime       @updatedAt
}

enum ShippingStatus {
  PROCESSING
  DELIVERING
  DELIVERED
}

//Make CRU Available, cannot be deleted
model Invoice {
  id           Int           @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  /// @Validator.IsNumber() 
  adminFee     Float
  /// @Validator.IsNotEmpty()
  /// @Validator.IsNumber() 
  amount       Float
  /// @HideField({ output: false, input: true })   
  uniqueCode   Int
  /// @HideField({ match: 'InvoiceUpdate*Input' })
  Order        Order?
  /// @HideField({ match: 'InvoiceUpdate*Input' })
  transactions Transaction[]
  /// @HideField({ match: 'InvoiceUpdate*Input' })
  Installments Installment[]
  /// @HideField({ output: false, input: true }) 
  createdAt    DateTime      @default(now())
}

model Installment {
  id            Int               @id @default(autoincrement())
  number        Int
  lateFee       Float
  amount        Float
  dueDate       DateTime
  status        InstallmentStatus
  transaction   Transaction?
  transactionId Int?
  invoice       Invoice           @relation(fields: [invoiceId], references: [id])
  invoiceId     Int
}

enum InstallmentStatus {
  UPCOMING
  PAID
}

//Make CRUD Available
model Program {
  /// @HideField({ match: 'ProgramCreate*Input' })
  id          Int             @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlphanumeric()
  /// @Validator.IsNotEmpty()
  name        String
  startDate   DateTime
  dueDate     DateTime?
  /// @Validator.IsNotEmpty()
  description String
  Images      Images[]
  createdBy   User            @relation(fields: [createdById], references: [id])
  createdById String
  /// @HideField({ match: 'ProgramCreate*Input' }) 
  participant User[]          @relation("participant")
  category    ProgramCategory @relation(fields: [categoryId], references: [id])
  /// @HideField({ match: 'ProgramCreate*Input' }) 
  categoryId  Int
  /// @HideField({ match: 'ProgramCreate*Input' }) 
  createdAt   DateTime        @default(now())
  /// @HideField({ match: 'ProgramCreate*Input' }) 
  updatedAt   DateTime        @updatedAt
}

//Make CRUD Available
model ProgramCategory {
  id        Int       @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsNotEmpty()
  /// @Validator.IsAlphanumeric()
  name      String
  programs  Program[]
  /// @HideField({ match: 'ProgramCategoryCreate*Input' })
  createdAt DateTime  @default(now())
  /// @HideField({ match: 'ProgramCategoryCreate*Input' })
  updatedAt DateTime  @updatedAt
}

//Make CRUD Available
model Reward {
  /// @HideField({ match: ['RewardCreate*Input','RewardUpdate*Input']})
  id          Int           @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsNotEmpty()
  /// @Validator.IsAlphanumeric()
  name        String
  /// @Validator.IsNumber() 
  /// @HideField({ match: 'RewardUpdate*Input' }) 
  pointCost   Float
  /// @Validator.MinLength(10)
  /// @Validator.IsNotEmpty()
  description String
  images      Images[]
  /// @HideField({ match: ['RewardCreate*Input','RewardUpdate*Input']})
  RewardClaim RewardClaim[]
  /// @HideField({ output: false, input: true })  
  createdAt   DateTime      @default(now())
  /// @HideField({ output: false, input: true })  
  updatedAt   DateTime      @updatedAt
}

model RewardClaim {
  id          Int      @id @default(autoincrement())
  /// @HideField({ match: 'RewardClaimUpdate*Input' }) 
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  /// @HideField({ match: 'RewardClaimUpdate*Input' }) 
  reward      Reward   @relation(fields: [rewardId], references: [id])
  rewardId    Int
  /// @HideField({ match: 'RewardClaimCreate*Input' }) 
  processedAt DateTime
  /// @HideField({ match: ['RewardClaimCreate*Input','RewardClaimUpdate*Input']})
  createdAt   DateTime @default(now())
}

//Make CRUD Available
model File {
  id          Int      @id @default(autoincrement())
  fileType    FileType
  filesize    Float
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsNotEmpty()
  name        String
  /// @Validator.MinLength(10)
  /// @Validator.IsNotEmpty()
  description String
  /// @Validator.IsUrl({ require_protocol: true })
  url         String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum FileType {
  MP4
  JPG
  PNG
  PDF
}

model Images {
  /// @HideField({ match: 'ImagesCreate*Input' })
  id             Int      @id @default(autoincrement())
  fileType       FileType //TODO: add validator hanya boleh JPG
  /// @Validator.IsNumber() 
  filesize       Float //TODO: add keterangan hanya boleh KB dan maximal 1MB
  /// @Validator.IsNotEmpty()
  /// @Validator.IsUrl({ require_protocol: true })
  url            String
  /// @HideField({ match: 'ImagesCreate*Input' })
  hotelImage     Hotel?   @relation(fields: [hotelImageId], references: [id])
  /// @HideField({ match: 'ImagesCreate*Input' })
  hotelImageId   Int?
  /// @HideField({ match: 'ImagesCreate*Input' })
  programImage   Program? @relation(fields: [programImageId], references: [id])
  /// @HideField({ match: 'ImagesCreate*Input' })
  programImageId Int?
  /// @HideField({ match: 'ImagesCreate*Input' })
  rewardImage    Reward?  @relation(fields: [rewardImageId], references: [id])
  /// @HideField({ match: 'ImagesCreate*Input' })
  rewardImageId  Int?
  /// @HideField({ match: 'ImagesCreate*Input' })
  projectImage   Project? @relation(fields: [projectImageId], references: [id])
  /// @HideField({ match: 'ImagesCreate*Input' })
  projectImageId Int?
  /// @HideField({ match: 'ImagesCreate*Input' })
  createdAt      DateTime @default(now())
}

//Make CRUD Available
model Faq {
  id          Int      @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsNotEmpty()
  name        String
  /// @Validator.MinLength(10)
  /// @Validator.IsNotEmpty()
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        FaqType
}

enum FaqType {
  REFERRAL_PAGE
  DASHBOARD_PAGE
  REWARD_PAGE
  PROJECT_PAGE
}

//Make CRU Available, cannot be deleted
model Project {
  id                Int             @id @default(autoincrement())
  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsNotEmpty()
  name              String
  description       String
  images            Images[]
  /// @Validator.MinLength(10)
  /// @Validator.IsNotEmpty()
  projectCategory   ProjectCategory
  startDate         DateTime
  endDate           DateTime
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  returnRate        Float
  /// @Validator.IsNotEmpty()
  /// @Validator.IsNumber() 
  goalAmount        Float
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  minimumInvestment Float
  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  maxInvestor       Int
  /// @HideField({ match: ['ProjectCreate*Input','ProjectUpdate*Input']})
  orderCart         Cart[]
  /// @HideField({ match: ['ProjectCreate*Input','ProjectUpdate*Input']})
  account           Account         @relation(fields: [accountId], references: [id])
  /// @HideField({ match: ['ProjectCreate*Input','ProjectUpdate*Input']})
  accountId         Int             @unique
  /// @HideField({ match: ['ProjectCreate*Input','ProjectUpdate*Input']})
  createdAt         DateTime        @default(now())
  /// @HideField({ match: ['ProjectCreate*Input','ProjectUpdate*Input']})
  updatedAt         DateTime        @updatedAt
}

enum ProjectCategory {
  PROPERTY
  BUSSINESS
}
