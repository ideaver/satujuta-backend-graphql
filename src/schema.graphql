# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CityCount {
  address: Int!
}

type City {
  id: ID!
  name: String!
  address: [Address!]
  _count: CityCount!
}

type DistrictCount {
  address: Int!
}

type District {
  id: ID!
  name: String!
  address: [Address!]
  _count: DistrictCount!
}

type PostalCodeCount {
  address: Int!
}

type PostalCode {
  id: ID!
  code: Int!
  address: [Address!]
  _count: PostalCodeCount!
}

type ProgramCategoryCount {
  programs: Int!
}

type ProgramCategory {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  programs: [Program!]
  _count: ProgramCategoryCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProgramCount {
  Images: Int!
  participant: Int!
}

type Program {
  id: ID!
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdById: String!
  categoryId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  Images: [Images!]
  createdBy: User!
  participant: [User!]
  category: ProgramCategory!
  _count: ProgramCount!
}

type RewardCount {
  images: Int!
  claimers: Int!
}

type Reward {
  id: ID!
  name: String!
  pointCost: Float!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  images: [Images!]
  claimers: [User!]
  _count: RewardCount!
}

type Item {
  id: ID!
  name: String!
  description: String!
  price: Float!
  qty: Int!
  userRole: UserRole!
  orderId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
}

enum UserRole {
  MEMBER
  ADMIN
  SUPERUSER
  STUDENT
}

type Shipping {
  id: ID!
  logisticName: String!
  deliveryDate: DateTime
  shippingStatus: ShippingStatus!
  addressId: Int!
  courier: String
  estimatedTime: String
  trackingNo: String
  orderId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  order: Order!
}

enum ShippingStatus {
  PROCESSING
  DELIVERING
  DELIVERED
}

type OrderCount {
  items: Int!
  payments: Int!
}

type Order {
  id: ID!
  status: TransactionStatus!
  orderById: String!
  shippingId: Int
  isFullPaid: Boolean!
  cost: Float!
  platformFee: Float!
  total: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  orderBy: User!
  items: [Item!]
  shipping: Shipping
  payments: [Payment!]
  _count: OrderCount!
}

enum TransactionStatus {
  PROCESSING
  PENDING
  FAILED
  CANCELLED
  COMPLETED
}

type PaymentConfirmation {
  id: ID!
  ProofUrl: String!
  paymentId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  payment: Payment!
}

type Payment {
  id: ID!
  adminFee: Float!
  totalPayment: Float!
  orderId: Int!
  transactionId: Int!
  createdAt: DateTime!
  order: Order!
  transaction: Transaction!
  confirmation: PaymentConfirmation
}

type Transaction {
  id: ID!
  amount: Float!
  status: TransactionStatus!
  transactionType: TransactionType!
  transactionCategory: TransactionCategory!
  currentBalance: Float!
  userId: String!
  accountId: Int!
  createdAt: DateTime!
  User: User!
  account: Account!
  payment: Payment
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionCategory {
  INVESTMENT
  INVESTMENT_RETURN
  COMISSION_BONUS
  WITHDRAWAL
  MEMBER_REGISTRATION
  STUDENT_REGISTRATION
}

type Bank {
  id: ID!
  name: String!
  logoUrl: String!
  accountNumber: Int!
  accountId: Int!
  account: Account!
}

type AccountCount {
  transactions: Int!
}

type Account {
  id: ID!
  accountNumber: Int
  name: String!
  balance: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  accountCategory: AccountCategory!
  user: User!
  transactions: [Transaction!]
  project: Project
  bankAccount: Bank
  _count: AccountCount!
}

enum AccountCategory {
  EQUITY
  PROJECT
  COMISSION
  CASH
  PLATFORM
  BANK
}

type ProjectCount {
  images: Int!
  investors: Int!
}

type Project {
  id: ID!
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Int!
  currentAmount: Float!
  minimumInvestment: Int!
  maxInvestor: Int!
  accountId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  images: [Images!]
  investors: [User!]
  account: Account!
  _count: ProjectCount!
}

enum ProjectCategory {
  PROPERTY
  BUSSINESS
}

type Images {
  id: ID!
  fileType: FileType!
  filesize: Float!
  url: String!
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
  createdAt: DateTime!
  hotelImage: Hotel
  programImage: Program
  rewardImage: Reward
  projectImage: Project
}

enum FileType {
  MP4
  JPG
  PNG
  PDF
}

type CheckIn {
  id: ID!
  userId: String!
  hotelId: Int!
  checkInAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  hotel: Hotel!
}

type HotelCount {
  images: Int!
  checkIns: Int!
}

type Hotel {
  id: ID!
  name: String!
  addressId: Int!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  createdById: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  images: [Images!]
  checkIns: [CheckIn!]
  createdBy: User!
  _count: HotelCount!
}

type SchoolCount {
  students: Int!
}

type School {
  id: ID!
  name: String!
  addressId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  students: [User!]
  _count: SchoolCount!
}

type Address {
  id: ID!
  name: String!
  cityId: Int!
  districtId: Int!
  postalCodeId: Int!
  city: City!
  district: District!
  postalCode: PostalCode!
  user: User
  hotel: Hotel
  school: School
  Shipping: Shipping
}

type PointTransaction {
  id: ID!
  amount: Float!
  pointType: PointType!
  transactionType: TransactionType!
  currentBalance: Float!
  userId: String!
  createdAt: DateTime!
  User: User!
}

enum PointType {
  REFERRING
  REDEEMING
}

type Session {
  id: ID!
  token: String!
  expiresAt: DateTime!
  createdAt: DateTime!
  userId: String!
  device: String!
  ipAddress: Float!
  user: User!
}

type UserNotification {
  id: ID!
  title: String!
  subtitle: String!
  content: String!
  createdAt: DateTime!
  category: UserNotificationCategory!
  isRead: Boolean!
  isCleared: Boolean!
  userId: String!
  deepLink: String
  fcmToken: String
  user: User!
}

enum UserNotificationCategory {
  BILLING_ALERT
  ANNOUNCEMENT
  CHAT_MESSAGE
}

type File {
  id: ID!
  fileType: FileType!
  filesize: Float!
  name: String!
  description: String!
  url: String!
  createdById: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
}

type UserCount {
  referredUsers: Int!
  checkIns: Int!
  accounts: Int!
  transactions: Int!
  PointTransactions: Int!
  orders: Int!
  sessions: Int!
  hotelsCreated: Int!
  programsParticipation: Int!
  projectsInvestment: Int!
  claimedRewards: Int!
  userNotifications: Int!
  programsCreated: Int!
  filesCreated: Int!
}

type User {
  id: ID!
  firstName: String!
  lastName: String
  email: String!
  addressId: Int!
  userRole: UserRole!
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  whatsappVerifiedAt: DateTime
  referredById: String
  status: UserStatus!
  schoolId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  theme: Theme!
  address: Address!
  referredBy: User
  referredUsers: [User!]
  checkIns: [CheckIn!]
  school: School
  accounts: [Account!]
  transactions: [Transaction!]
  PointTransactions: [PointTransaction!]
  orders: [Order!]
  sessions: [Session!]
  hotelsCreated: [Hotel!]
  programsParticipation: [Program!]
  projectsInvestment: [Project!]
  claimedRewards: [Reward!]
  userNotifications: [UserNotification!]
  programsCreated: [Program!]
  filesCreated: [File!]
  _count: UserCount!
}

enum UserType {
  PARENT
  SCHOOL_HEAD
  STUDENT
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum Theme {
  LIGHT
  DARK
}

type Query {
  """Deskripsinya ada disini loh"""
  userFindMany(userFindManyArgs: FindManyUserArgs!): [User!]

  """Deskripsinya ada disini loh"""
  userFindOne(userFindUniqueArgs: UserFindUniqueArgs!): User
}

input FindManyUserArgs {
  select: UserSelect
  include: UserSelect
  where: UserWhereInput
  orderBy: [UserOrderByWithRelationInput!]
  cursor: UserWhereUniqueInput
  take: Int
  skip: Int
  distinct: [UserScalarFieldEnum!]
}

input UserSelect {
  id: Boolean
  firstName: Boolean
  lastName: Boolean
  email: Boolean
  addressId: Boolean
  userRole: Boolean
  userType: Boolean
  avatarUrl: Boolean
  whatsappNumber: Boolean
  whatsappVerifiedAt: Boolean
  password: Boolean
  referredById: Boolean
  status: Boolean
  schoolId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  theme: Boolean
  address: Boolean
  referredBy: Boolean
  referredUsers: Boolean
  checkIns: Boolean
  school: Boolean
  accounts: Boolean
  transactions: Boolean
  PointTransactions: Boolean
  orders: Boolean
  sessions: Boolean
  hotelsCreated: Boolean
  programsParticipation: Boolean
  projectsInvestment: Boolean
  claimedRewards: Boolean
  userNotifications: Boolean
  programsCreated: Boolean
  filesCreated: Boolean
  _count: Boolean
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  firstName: StringFilter
  lastName: StringNullableFilter
  email: StringFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  whatsappNumber: StringFilter
  password: StringFilter
  theme: EnumThemeFilter
  address: AddressRelationFilter
  referredBy: UserNullableRelationFilter
  school: SchoolNullableRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input EnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  notIn: [UserType!]
  not: NestedEnumUserTypeFilter
}

input NestedEnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  notIn: [UserType!]
  not: NestedEnumUserTypeFilter
}

input EnumThemeFilter {
  equals: Theme
  in: [Theme!]
  notIn: [Theme!]
  not: NestedEnumThemeFilter
}

input NestedEnumThemeFilter {
  equals: Theme
  in: [Theme!]
  notIn: [Theme!]
  not: NestedEnumThemeFilter
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IntFilter
  name: StringFilter
  cityId: IntFilter
  districtId: IntFilter
  postalCodeId: IntFilter
  city: CityRelationFilter
  district: DistrictRelationFilter
  postalCode: PostalCodeRelationFilter
  user: UserNullableRelationFilter
  hotel: HotelNullableRelationFilter
  school: SchoolNullableRelationFilter
  Shipping: ShippingNullableRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: IntFilter
  name: StringFilter
  address: AddressListRelationFilter
}

input AddressListRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input DistrictRelationFilter {
  is: DistrictWhereInput
  isNot: DistrictWhereInput
}

input DistrictWhereInput {
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  id: IntFilter
  name: StringFilter
  address: AddressListRelationFilter
}

input PostalCodeRelationFilter {
  is: PostalCodeWhereInput
  isNot: PostalCodeWhereInput
}

input PostalCodeWhereInput {
  AND: [PostalCodeWhereInput!]
  OR: [PostalCodeWhereInput!]
  NOT: [PostalCodeWhereInput!]
  id: IntFilter
  code: IntFilter
  address: AddressListRelationFilter
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input HotelNullableRelationFilter {
  is: HotelWhereInput
  isNot: HotelWhereInput
}

input HotelWhereInput {
  AND: [HotelWhereInput!]
  OR: [HotelWhereInput!]
  NOT: [HotelWhereInput!]
  id: IntFilter
  name: StringFilter
  addressId: IntFilter
  description: StringFilter
  rating: FloatFilter
  startDate: DateTimeFilter
  quota: IntFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  images: ImagesListRelationFilter
  checkIns: CheckInListRelationFilter
  createdBy: UserRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input ImagesListRelationFilter {
  every: ImagesWhereInput
  some: ImagesWhereInput
  none: ImagesWhereInput
}

input ImagesWhereInput {
  AND: [ImagesWhereInput!]
  OR: [ImagesWhereInput!]
  NOT: [ImagesWhereInput!]
  id: IntFilter
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
  hotelImage: HotelNullableRelationFilter
  programImage: ProgramNullableRelationFilter
  rewardImage: RewardNullableRelationFilter
  projectImage: ProjectNullableRelationFilter
}

input EnumFileTypeFilter {
  equals: FileType
  in: [FileType!]
  notIn: [FileType!]
  not: NestedEnumFileTypeFilter
}

input NestedEnumFileTypeFilter {
  equals: FileType
  in: [FileType!]
  notIn: [FileType!]
  not: NestedEnumFileTypeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input ProgramNullableRelationFilter {
  is: ProgramWhereInput
  isNot: ProgramWhereInput
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IntFilter
  name: StringFilter
  startDate: DateTimeFilter
  dueDate: DateTimeNullableFilter
  description: StringFilter
  createdById: StringFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Images: ImagesListRelationFilter
  createdBy: UserRelationFilter
  participant: UserListRelationFilter
  category: ProgramCategoryRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ProgramCategoryRelationFilter {
  is: ProgramCategoryWhereInput
  isNot: ProgramCategoryWhereInput
}

input ProgramCategoryWhereInput {
  AND: [ProgramCategoryWhereInput!]
  OR: [ProgramCategoryWhereInput!]
  NOT: [ProgramCategoryWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  programs: ProgramListRelationFilter
}

input ProgramListRelationFilter {
  every: ProgramWhereInput
  some: ProgramWhereInput
  none: ProgramWhereInput
}

input RewardNullableRelationFilter {
  is: RewardWhereInput
  isNot: RewardWhereInput
}

input RewardWhereInput {
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
  id: IntFilter
  name: StringFilter
  pointCost: FloatFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  claimers: UserListRelationFilter
}

input ProjectNullableRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  projectCategory: EnumProjectCategoryFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  returnRate: FloatFilter
  goalAmount: IntFilter
  currentAmount: FloatFilter
  minimumInvestment: IntFilter
  maxInvestor: IntFilter
  accountId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  investors: UserListRelationFilter
  account: AccountRelationFilter
}

input EnumProjectCategoryFilter {
  equals: ProjectCategory
  in: [ProjectCategory!]
  notIn: [ProjectCategory!]
  not: NestedEnumProjectCategoryFilter
}

input NestedEnumProjectCategoryFilter {
  equals: ProjectCategory
  in: [ProjectCategory!]
  notIn: [ProjectCategory!]
  not: NestedEnumProjectCategoryFilter
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IntFilter
  accountNumber: IntNullableFilter
  name: StringFilter
  balance: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  accountCategory: EnumAccountCategoryFilter
  user: UserRelationFilter
  transactions: TransactionListRelationFilter
  project: ProjectNullableRelationFilter
  bankAccount: BankNullableRelationFilter
}

input EnumAccountCategoryFilter {
  equals: AccountCategory
  in: [AccountCategory!]
  notIn: [AccountCategory!]
  not: NestedEnumAccountCategoryFilter
}

input NestedEnumAccountCategoryFilter {
  equals: AccountCategory
  in: [AccountCategory!]
  notIn: [AccountCategory!]
  not: NestedEnumAccountCategoryFilter
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  some: TransactionWhereInput
  none: TransactionWhereInput
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  id: IntFilter
  amount: FloatFilter
  status: EnumTransactionStatusFilter
  transactionType: EnumTransactionTypeFilter
  transactionCategory: EnumTransactionCategoryFilter
  currentBalance: FloatFilter
  userId: StringFilter
  accountId: IntFilter
  createdAt: DateTimeFilter
  User: UserRelationFilter
  account: AccountRelationFilter
  payment: PaymentNullableRelationFilter
}

input EnumTransactionStatusFilter {
  equals: TransactionStatus
  in: [TransactionStatus!]
  notIn: [TransactionStatus!]
  not: NestedEnumTransactionStatusFilter
}

input NestedEnumTransactionStatusFilter {
  equals: TransactionStatus
  in: [TransactionStatus!]
  notIn: [TransactionStatus!]
  not: NestedEnumTransactionStatusFilter
}

input EnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input NestedEnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input EnumTransactionCategoryFilter {
  equals: TransactionCategory
  in: [TransactionCategory!]
  notIn: [TransactionCategory!]
  not: NestedEnumTransactionCategoryFilter
}

input NestedEnumTransactionCategoryFilter {
  equals: TransactionCategory
  in: [TransactionCategory!]
  notIn: [TransactionCategory!]
  not: NestedEnumTransactionCategoryFilter
}

input PaymentNullableRelationFilter {
  is: PaymentWhereInput
  isNot: PaymentWhereInput
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IntFilter
  adminFee: FloatFilter
  totalPayment: FloatFilter
  orderId: IntFilter
  transactionId: IntFilter
  createdAt: DateTimeFilter
  order: OrderRelationFilter
  transaction: TransactionRelationFilter
  confirmation: PaymentConfirmationNullableRelationFilter
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IntFilter
  status: EnumTransactionStatusFilter
  orderById: StringFilter
  shippingId: IntNullableFilter
  isFullPaid: BoolFilter
  cost: FloatFilter
  platformFee: FloatFilter
  total: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderBy: UserRelationFilter
  items: ItemListRelationFilter
  shipping: ShippingNullableRelationFilter
  payments: PaymentListRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input ItemListRelationFilter {
  every: ItemWhereInput
  some: ItemWhereInput
  none: ItemWhereInput
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  qty: IntFilter
  userRole: EnumUserRoleFilter
  orderId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  order: OrderRelationFilter
}

input ShippingNullableRelationFilter {
  is: ShippingWhereInput
  isNot: ShippingWhereInput
}

input ShippingWhereInput {
  AND: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  NOT: [ShippingWhereInput!]
  id: IntFilter
  logisticName: StringFilter
  deliveryDate: DateTimeNullableFilter
  shippingStatus: EnumShippingStatusFilter
  addressId: IntFilter
  courier: StringNullableFilter
  estimatedTime: StringNullableFilter
  trackingNo: StringNullableFilter
  orderId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  order: OrderRelationFilter
}

input EnumShippingStatusFilter {
  equals: ShippingStatus
  in: [ShippingStatus!]
  notIn: [ShippingStatus!]
  not: NestedEnumShippingStatusFilter
}

input NestedEnumShippingStatusFilter {
  equals: ShippingStatus
  in: [ShippingStatus!]
  notIn: [ShippingStatus!]
  not: NestedEnumShippingStatusFilter
}

input PaymentListRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input TransactionRelationFilter {
  is: TransactionWhereInput
  isNot: TransactionWhereInput
}

input PaymentConfirmationNullableRelationFilter {
  is: PaymentConfirmationWhereInput
  isNot: PaymentConfirmationWhereInput
}

input PaymentConfirmationWhereInput {
  AND: [PaymentConfirmationWhereInput!]
  OR: [PaymentConfirmationWhereInput!]
  NOT: [PaymentConfirmationWhereInput!]
  id: IntFilter
  ProofUrl: StringFilter
  paymentId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  payment: PaymentRelationFilter
}

input PaymentRelationFilter {
  is: PaymentWhereInput
  isNot: PaymentWhereInput
}

input BankNullableRelationFilter {
  is: BankWhereInput
  isNot: BankWhereInput
}

input BankWhereInput {
  AND: [BankWhereInput!]
  OR: [BankWhereInput!]
  NOT: [BankWhereInput!]
  id: IntFilter
  name: StringFilter
  logoUrl: StringFilter
  accountNumber: IntFilter
  accountId: IntFilter
  account: AccountRelationFilter
}

input CheckInListRelationFilter {
  every: CheckInWhereInput
  some: CheckInWhereInput
  none: CheckInWhereInput
}

input CheckInWhereInput {
  AND: [CheckInWhereInput!]
  OR: [CheckInWhereInput!]
  NOT: [CheckInWhereInput!]
  id: IntFilter
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  hotel: HotelRelationFilter
}

input HotelRelationFilter {
  is: HotelWhereInput
  isNot: HotelWhereInput
}

input SchoolNullableRelationFilter {
  is: SchoolWhereInput
  isNot: SchoolWhereInput
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  id: IntFilter
  name: StringFilter
  addressId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  students: UserListRelationFilter
}

input UserOrderByWithRelationInput {
  firstName: SortOrder
  lastName: SortOrderInput
  email: SortOrder
  userRole: SortOrder
  userType: SortOrder
  avatarUrl: SortOrderInput
  whatsappNumber: SortOrder
  password: SortOrder
  theme: SortOrder
  address: AddressOrderByWithRelationInput
  referredBy: UserOrderByWithRelationInput
  school: SchoolOrderByWithRelationInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input AddressOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  cityId: SortOrder
  districtId: SortOrder
  postalCodeId: SortOrder
  city: CityOrderByWithRelationInput
  district: DistrictOrderByWithRelationInput
  postalCode: PostalCodeOrderByWithRelationInput
  user: UserOrderByWithRelationInput
  hotel: HotelOrderByWithRelationInput
  school: SchoolOrderByWithRelationInput
  Shipping: ShippingOrderByWithRelationInput
}

input CityOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  address: AddressOrderByRelationAggregateInput
}

input AddressOrderByRelationAggregateInput {
  _count: SortOrder
}

input DistrictOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  address: AddressOrderByRelationAggregateInput
}

input PostalCodeOrderByWithRelationInput {
  id: SortOrder
  code: SortOrder
  address: AddressOrderByRelationAggregateInput
}

input HotelOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  addressId: SortOrder
  description: SortOrder
  rating: SortOrder
  startDate: SortOrder
  quota: SortOrder
  createdById: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: AddressOrderByWithRelationInput
  images: ImagesOrderByRelationAggregateInput
  checkIns: CheckInOrderByRelationAggregateInput
  createdBy: UserOrderByWithRelationInput
}

input ImagesOrderByRelationAggregateInput {
  _count: SortOrder
}

input CheckInOrderByRelationAggregateInput {
  _count: SortOrder
}

input SchoolOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: AddressOrderByWithRelationInput
  students: UserOrderByRelationAggregateInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShippingOrderByWithRelationInput {
  id: SortOrder
  logisticName: SortOrder
  deliveryDate: SortOrderInput
  shippingStatus: SortOrder
  addressId: SortOrder
  courier: SortOrderInput
  estimatedTime: SortOrderInput
  trackingNo: SortOrderInput
  orderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: AddressOrderByWithRelationInput
  order: OrderOrderByWithRelationInput
}

input OrderOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
  orderById: SortOrder
  shippingId: SortOrderInput
  isFullPaid: SortOrder
  cost: SortOrder
  platformFee: SortOrder
  total: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  orderBy: UserOrderByWithRelationInput
  items: ItemOrderByRelationAggregateInput
  shipping: ShippingOrderByWithRelationInput
  payments: PaymentOrderByRelationAggregateInput
}

input ItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input PaymentOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  email: String
  whatsappNumber: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  firstName: StringFilter
  lastName: StringNullableFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  password: StringFilter
  theme: EnumThemeFilter
  address: AddressRelationFilter
  referredBy: UserNullableRelationFilter
  school: SchoolNullableRelationFilter
}

enum UserScalarFieldEnum {
  id
  firstName
  lastName
  email
  addressId
  userRole
  userType
  avatarUrl
  whatsappNumber
  whatsappVerifiedAt
  password
  referredById
  status
  schoolId
  createdAt
  updatedAt
  deletedAt
  theme
}

input UserFindUniqueArgs {
  select: UserSelect
  include: UserSelect
  where: UserWhereUniqueInput!
}

type Mutation {
  """Deskripsinya ada disini loh"""
  userCreate(userCreateArgs: UserCreateArgs!): User

  """Deskripsinya ada disini loh"""
  updateUser(userUpdateOneArgs: UserUpdateOneArgs!): User!

  """
  Hanya berupa softdelete, artinya semua data tetap ada di database. field deleteAt pada entitas user akan terisi. select: { id: true, firstName: true, deletedAt: true }
  """
  userRemove(userId: String!): User
}

input UserCreateArgs {
  select: UserSelect
  include: UserSelect
  data: UserCreateInput!
}

input UserCreateInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole!
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
}

input AddressCreateNestedOneWithoutUserInput {
  create: AddressCreateWithoutUserInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutUserInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
  hotel: HotelCreateNestedOneWithoutAddressInput
  school: SchoolCreateNestedOneWithoutAddressInput
  Shipping: ShippingCreateNestedOneWithoutAddressInput
}

input CityCreateNestedOneWithoutAddressInput {
  create: CityCreateWithoutAddressInput
  connectOrCreate: CityCreateOrConnectWithoutAddressInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutAddressInput {
  name: String!
}

input CityCreateOrConnectWithoutAddressInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutAddressInput!
}

input CityWhereUniqueInput {
  id: Int
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  name: StringFilter
  address: AddressListRelationFilter
}

input DistrictCreateNestedOneWithoutAddressInput {
  create: DistrictCreateWithoutAddressInput
  connectOrCreate: DistrictCreateOrConnectWithoutAddressInput
  connect: DistrictWhereUniqueInput
}

input DistrictCreateWithoutAddressInput {
  name: String!
}

input DistrictCreateOrConnectWithoutAddressInput {
  where: DistrictWhereUniqueInput!
  create: DistrictCreateWithoutAddressInput!
}

input DistrictWhereUniqueInput {
  id: Int
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  name: StringFilter
  address: AddressListRelationFilter
}

input PostalCodeCreateNestedOneWithoutAddressInput {
  create: PostalCodeCreateWithoutAddressInput
  connectOrCreate: PostalCodeCreateOrConnectWithoutAddressInput
  connect: PostalCodeWhereUniqueInput
}

input PostalCodeCreateWithoutAddressInput {
  code: Int!
}

input PostalCodeCreateOrConnectWithoutAddressInput {
  where: PostalCodeWhereUniqueInput!
  create: PostalCodeCreateWithoutAddressInput!
}

input PostalCodeWhereUniqueInput {
  id: Int
  code: Int
  AND: [PostalCodeWhereInput!]
  OR: [PostalCodeWhereInput!]
  NOT: [PostalCodeWhereInput!]
  address: AddressListRelationFilter
}

input HotelCreateNestedOneWithoutAddressInput {
  create: HotelCreateWithoutAddressInput
  connectOrCreate: HotelCreateOrConnectWithoutAddressInput
  connect: HotelWhereUniqueInput
}

input HotelCreateWithoutAddressInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  createdAt: DateTime
  updatedAt: DateTime
  images: ImagesCreateNestedManyWithoutHotelImageInput
  checkIns: CheckInCreateNestedManyWithoutHotelInput
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input ImagesCreateNestedManyWithoutHotelImageInput {
  create: [ImagesCreateWithoutHotelImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutHotelImageInput!]
  createMany: ImagesCreateManyHotelImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateWithoutHotelImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
  createdAt: DateTime
  programImage: ProgramCreateNestedOneWithoutImagesInput
  rewardImage: RewardCreateNestedOneWithoutImagesInput
  projectImage: ProjectCreateNestedOneWithoutImagesInput
}

input ProgramCreateNestedOneWithoutImagesInput {
  create: ProgramCreateWithoutImagesInput
  connectOrCreate: ProgramCreateOrConnectWithoutImagesInput
  connect: ProgramWhereUniqueInput
}

input ProgramCreateWithoutImagesInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserCreateNestedOneWithoutProgramsCreatedInput!
  participant: UserCreateNestedManyWithoutProgramsParticipationInput
  category: ProgramCategoryCreateNestedOneWithoutProgramsInput!
}

input UserCreateNestedOneWithoutProgramsCreatedInput {
  create: UserCreateWithoutProgramsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutProgramsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProgramsCreatedInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateNestedOneWithoutReferredUsersInput {
  create: UserCreateWithoutReferredUsersInput
  connectOrCreate: UserCreateOrConnectWithoutReferredUsersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutReferredUsersInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input SchoolCreateNestedOneWithoutStudentsInput {
  create: SchoolCreateWithoutStudentsInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  connect: SchoolWhereUniqueInput
}

input SchoolCreateWithoutStudentsInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  address: AddressCreateNestedOneWithoutSchoolInput!
}

input AddressCreateNestedOneWithoutSchoolInput {
  create: AddressCreateWithoutSchoolInput
  connectOrCreate: AddressCreateOrConnectWithoutSchoolInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutSchoolInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
  user: UserCreateNestedOneWithoutAddressInput
  hotel: HotelCreateNestedOneWithoutAddressInput
  Shipping: ShippingCreateNestedOneWithoutAddressInput
}

input UserCreateNestedOneWithoutAddressInput {
  create: UserCreateWithoutAddressInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutAddressInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAddressInput!
}

input ShippingCreateNestedOneWithoutAddressInput {
  create: ShippingCreateWithoutAddressInput
  connectOrCreate: ShippingCreateOrConnectWithoutAddressInput
  connect: ShippingWhereUniqueInput
}

input ShippingCreateWithoutAddressInput {
  logisticName: String!
  deliveryDate: DateTime
  shippingStatus: ShippingStatus!
  courier: String
  estimatedTime: String
  trackingNo: String
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutShippingInput!
}

input OrderCreateNestedOneWithoutShippingInput {
  create: OrderCreateWithoutShippingInput
  connectOrCreate: OrderCreateOrConnectWithoutShippingInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutShippingInput {
  status: TransactionStatus!
  shippingId: Int
  isFullPaid: Boolean!
  cost: Float!
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  items: ItemCreateNestedManyWithoutOrderInput
  payments: PaymentCreateNestedManyWithoutOrderInput
}

input UserCreateNestedOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOrdersInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutOrdersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutOrdersInput!
}

input ItemCreateNestedManyWithoutOrderInput {
  create: [ItemCreateWithoutOrderInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutOrderInput!]
  createMany: ItemCreateManyOrderInputEnvelope
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutOrderInput {
  name: String!
  description: String!
  price: Float!
  qty: Int!
  userRole: UserRole!
  createdAt: DateTime
  updatedAt: DateTime
}

input ItemCreateOrConnectWithoutOrderInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutOrderInput!
}

input ItemWhereUniqueInput {
  id: Int
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  qty: IntFilter
  userRole: EnumUserRoleFilter
  orderId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  order: OrderRelationFilter
}

input ItemCreateManyOrderInputEnvelope {
  data: [ItemCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input ItemCreateManyOrderInput {
  id: Int
  name: String!
  description: String!
  price: Float!
  qty: Int!
  userRole: UserRole!
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentCreateNestedManyWithoutOrderInput {
  create: [PaymentCreateWithoutOrderInput!]
  connectOrCreate: [PaymentCreateOrConnectWithoutOrderInput!]
  createMany: PaymentCreateManyOrderInputEnvelope
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateWithoutOrderInput {
  adminFee: Float!
  totalPayment: Float!
  createdAt: DateTime
  transaction: TransactionCreateNestedOneWithoutPaymentInput!
  confirmation: PaymentConfirmationCreateNestedOneWithoutPaymentInput
}

input TransactionCreateNestedOneWithoutPaymentInput {
  create: TransactionCreateWithoutPaymentInput
  connectOrCreate: TransactionCreateOrConnectWithoutPaymentInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateWithoutPaymentInput {
  amount: Float!
  status: TransactionStatus!
  transactionType: TransactionType!
  transactionCategory: TransactionCategory!
  currentBalance: Float!
  createdAt: DateTime
  User: UserCreateNestedOneWithoutTransactionsInput!
  account: AccountCreateNestedOneWithoutTransactionsInput!
}

input UserCreateNestedOneWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTransactionsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutTransactionsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutTransactionsInput!
}

input AccountCreateNestedOneWithoutTransactionsInput {
  create: AccountCreateWithoutTransactionsInput
  connectOrCreate: AccountCreateOrConnectWithoutTransactionsInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutTransactionsInput {
  accountNumber: Int
  name: String!
  balance: Float
  createdAt: DateTime
  updatedAt: DateTime
  accountCategory: AccountCategory!
  user: UserCreateNestedOneWithoutAccountsInput!
  project: ProjectCreateNestedOneWithoutAccountInput
  bankAccount: BankCreateNestedOneWithoutAccountInput
}

input UserCreateNestedOneWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAccountsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAccountsInput!
}

input ProjectCreateNestedOneWithoutAccountInput {
  create: ProjectCreateWithoutAccountInput
  connectOrCreate: ProjectCreateOrConnectWithoutAccountInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutAccountInput {
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Int!
  currentAmount: Float!
  minimumInvestment: Int!
  maxInvestor: Int!
  createdAt: DateTime
  updatedAt: DateTime
  images: ImagesCreateNestedManyWithoutProjectImageInput
  investors: UserCreateNestedManyWithoutProjectsInvestmentInput
}

input ImagesCreateNestedManyWithoutProjectImageInput {
  create: [ImagesCreateWithoutProjectImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProjectImageInput!]
  createMany: ImagesCreateManyProjectImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateWithoutProjectImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
  createdAt: DateTime
  hotelImage: HotelCreateNestedOneWithoutImagesInput
  programImage: ProgramCreateNestedOneWithoutImagesInput
  rewardImage: RewardCreateNestedOneWithoutImagesInput
}

input HotelCreateNestedOneWithoutImagesInput {
  create: HotelCreateWithoutImagesInput
  connectOrCreate: HotelCreateOrConnectWithoutImagesInput
  connect: HotelWhereUniqueInput
}

input HotelCreateWithoutImagesInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  createdAt: DateTime
  updatedAt: DateTime
  address: AddressCreateNestedOneWithoutHotelInput!
  checkIns: CheckInCreateNestedManyWithoutHotelInput
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input AddressCreateNestedOneWithoutHotelInput {
  create: AddressCreateWithoutHotelInput
  connectOrCreate: AddressCreateOrConnectWithoutHotelInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutHotelInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
  user: UserCreateNestedOneWithoutAddressInput
  school: SchoolCreateNestedOneWithoutAddressInput
  Shipping: ShippingCreateNestedOneWithoutAddressInput
}

input SchoolCreateNestedOneWithoutAddressInput {
  create: SchoolCreateWithoutAddressInput
  connectOrCreate: SchoolCreateOrConnectWithoutAddressInput
  connect: SchoolWhereUniqueInput
}

input SchoolCreateWithoutAddressInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  students: UserCreateNestedManyWithoutSchoolInput
}

input UserCreateNestedManyWithoutSchoolInput {
  create: [UserCreateWithoutSchoolInput!]
  connectOrCreate: [UserCreateOrConnectWithoutSchoolInput!]
  createMany: UserCreateManySchoolInputEnvelope
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutSchoolInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
}

input UserCreateOrConnectWithoutSchoolInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutSchoolInput!
}

input UserCreateManySchoolInputEnvelope {
  data: [UserCreateManySchoolInput!]!
  skipDuplicates: Boolean
}

input UserCreateManySchoolInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
}

input SchoolCreateOrConnectWithoutAddressInput {
  where: SchoolWhereUniqueInput!
  create: SchoolCreateWithoutAddressInput!
}

input SchoolWhereUniqueInput {
  id: Int
  addressId: Int
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  students: UserListRelationFilter
}

input AddressCreateOrConnectWithoutHotelInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutHotelInput!
}

input AddressWhereUniqueInput {
  id: Int
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  name: StringFilter
  cityId: IntFilter
  districtId: IntFilter
  postalCodeId: IntFilter
  city: CityRelationFilter
  district: DistrictRelationFilter
  postalCode: PostalCodeRelationFilter
  user: UserNullableRelationFilter
  hotel: HotelNullableRelationFilter
  school: SchoolNullableRelationFilter
  Shipping: ShippingNullableRelationFilter
}

input CheckInCreateNestedManyWithoutHotelInput {
  create: [CheckInCreateWithoutHotelInput!]
  connectOrCreate: [CheckInCreateOrConnectWithoutHotelInput!]
  createMany: CheckInCreateManyHotelInputEnvelope
  connect: [CheckInWhereUniqueInput!]
}

input CheckInCreateWithoutHotelInput {
  checkInAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutCheckInsInput!
}

input UserCreateNestedOneWithoutCheckInsInput {
  create: UserCreateWithoutCheckInsInput
  connectOrCreate: UserCreateOrConnectWithoutCheckInsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCheckInsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutCheckInsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCheckInsInput!
}

input CheckInCreateOrConnectWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  create: CheckInCreateWithoutHotelInput!
}

input CheckInWhereUniqueInput {
  id: Int
  AND: [CheckInWhereInput!]
  OR: [CheckInWhereInput!]
  NOT: [CheckInWhereInput!]
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  hotel: HotelRelationFilter
}

input CheckInCreateManyHotelInputEnvelope {
  data: [CheckInCreateManyHotelInput!]!
  skipDuplicates: Boolean
}

input CheckInCreateManyHotelInput {
  id: Int
  userId: String!
  checkInAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutHotelsCreatedInput {
  create: UserCreateWithoutHotelsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutHotelsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutHotelsCreatedInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutHotelsCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutHotelsCreatedInput!
}

input HotelCreateOrConnectWithoutImagesInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutImagesInput!
}

input HotelWhereUniqueInput {
  id: Int
  addressId: Int
  AND: [HotelWhereInput!]
  OR: [HotelWhereInput!]
  NOT: [HotelWhereInput!]
  name: StringFilter
  description: StringFilter
  rating: FloatFilter
  startDate: DateTimeFilter
  quota: IntFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  images: ImagesListRelationFilter
  checkIns: CheckInListRelationFilter
  createdBy: UserRelationFilter
}

input RewardCreateNestedOneWithoutImagesInput {
  create: RewardCreateWithoutImagesInput
  connectOrCreate: RewardCreateOrConnectWithoutImagesInput
  connect: RewardWhereUniqueInput
}

input RewardCreateWithoutImagesInput {
  name: String!
  pointCost: Float!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  claimers: UserCreateNestedManyWithoutClaimedRewardsInput
}

input UserCreateNestedManyWithoutClaimedRewardsInput {
  create: [UserCreateWithoutClaimedRewardsInput!]
  connectOrCreate: [UserCreateOrConnectWithoutClaimedRewardsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutClaimedRewardsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutClaimedRewardsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutClaimedRewardsInput!
}

input RewardCreateOrConnectWithoutImagesInput {
  where: RewardWhereUniqueInput!
  create: RewardCreateWithoutImagesInput!
}

input RewardWhereUniqueInput {
  id: Int
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
  name: StringFilter
  pointCost: FloatFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  claimers: UserListRelationFilter
}

input ImagesCreateOrConnectWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutProjectImageInput!
}

input ImagesWhereUniqueInput {
  id: Int
  AND: [ImagesWhereInput!]
  OR: [ImagesWhereInput!]
  NOT: [ImagesWhereInput!]
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
  hotelImage: HotelNullableRelationFilter
  programImage: ProgramNullableRelationFilter
  rewardImage: RewardNullableRelationFilter
  projectImage: ProjectNullableRelationFilter
}

input ImagesCreateManyProjectImageInputEnvelope {
  data: [ImagesCreateManyProjectImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyProjectImageInput {
  id: Int
  fileType: FileType!
  filesize: Float!
  url: String!
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  createdAt: DateTime
}

input UserCreateNestedManyWithoutProjectsInvestmentInput {
  create: [UserCreateWithoutProjectsInvestmentInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProjectsInvestmentInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutProjectsInvestmentInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutProjectsInvestmentInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProjectsInvestmentInput!
}

input ProjectCreateOrConnectWithoutAccountInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutAccountInput!
}

input ProjectWhereUniqueInput {
  id: Int
  accountId: Int
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  name: StringFilter
  description: StringFilter
  projectCategory: EnumProjectCategoryFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  returnRate: FloatFilter
  goalAmount: IntFilter
  currentAmount: FloatFilter
  minimumInvestment: IntFilter
  maxInvestor: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  investors: UserListRelationFilter
  account: AccountRelationFilter
}

input BankCreateNestedOneWithoutAccountInput {
  create: BankCreateWithoutAccountInput
  connectOrCreate: BankCreateOrConnectWithoutAccountInput
  connect: BankWhereUniqueInput
}

input BankCreateWithoutAccountInput {
  name: String!
  logoUrl: String!
  accountNumber: Int!
}

input BankCreateOrConnectWithoutAccountInput {
  where: BankWhereUniqueInput!
  create: BankCreateWithoutAccountInput!
}

input BankWhereUniqueInput {
  id: Int
  accountId: Int
  AND: [BankWhereInput!]
  OR: [BankWhereInput!]
  NOT: [BankWhereInput!]
  name: StringFilter
  logoUrl: StringFilter
  accountNumber: IntFilter
  account: AccountRelationFilter
}

input AccountCreateOrConnectWithoutTransactionsInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutTransactionsInput!
}

input AccountWhereUniqueInput {
  id: Int
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  accountNumber: IntNullableFilter
  name: StringFilter
  balance: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  accountCategory: EnumAccountCategoryFilter
  user: UserRelationFilter
  transactions: TransactionListRelationFilter
  project: ProjectNullableRelationFilter
  bankAccount: BankNullableRelationFilter
}

input TransactionCreateOrConnectWithoutPaymentInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutPaymentInput!
}

input TransactionWhereUniqueInput {
  id: Int
  userId: String
  accountId: Int
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  amount: FloatFilter
  status: EnumTransactionStatusFilter
  transactionType: EnumTransactionTypeFilter
  transactionCategory: EnumTransactionCategoryFilter
  currentBalance: FloatFilter
  createdAt: DateTimeFilter
  User: UserRelationFilter
  account: AccountRelationFilter
  payment: PaymentNullableRelationFilter
}

input PaymentConfirmationCreateNestedOneWithoutPaymentInput {
  create: PaymentConfirmationCreateWithoutPaymentInput
  connectOrCreate: PaymentConfirmationCreateOrConnectWithoutPaymentInput
  connect: PaymentConfirmationWhereUniqueInput
}

input PaymentConfirmationCreateWithoutPaymentInput {
  ProofUrl: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentConfirmationCreateOrConnectWithoutPaymentInput {
  where: PaymentConfirmationWhereUniqueInput!
  create: PaymentConfirmationCreateWithoutPaymentInput!
}

input PaymentConfirmationWhereUniqueInput {
  id: Int
  paymentId: Int
  AND: [PaymentConfirmationWhereInput!]
  OR: [PaymentConfirmationWhereInput!]
  NOT: [PaymentConfirmationWhereInput!]
  ProofUrl: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  payment: PaymentRelationFilter
}

input PaymentCreateOrConnectWithoutOrderInput {
  where: PaymentWhereUniqueInput!
  create: PaymentCreateWithoutOrderInput!
}

input PaymentWhereUniqueInput {
  id: Int
  transactionId: Int
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  adminFee: FloatFilter
  totalPayment: FloatFilter
  orderId: IntFilter
  createdAt: DateTimeFilter
  order: OrderRelationFilter
  transaction: TransactionRelationFilter
  confirmation: PaymentConfirmationNullableRelationFilter
}

input PaymentCreateManyOrderInputEnvelope {
  data: [PaymentCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input PaymentCreateManyOrderInput {
  id: Int
  adminFee: Float!
  totalPayment: Float!
  transactionId: Int!
  createdAt: DateTime
}

input OrderCreateOrConnectWithoutShippingInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutShippingInput!
}

input OrderWhereUniqueInput {
  id: Int
  orderById: String
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  status: EnumTransactionStatusFilter
  shippingId: IntNullableFilter
  isFullPaid: BoolFilter
  cost: FloatFilter
  platformFee: FloatFilter
  total: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderBy: UserRelationFilter
  items: ItemListRelationFilter
  shipping: ShippingNullableRelationFilter
  payments: PaymentListRelationFilter
}

input ShippingCreateOrConnectWithoutAddressInput {
  where: ShippingWhereUniqueInput!
  create: ShippingCreateWithoutAddressInput!
}

input ShippingWhereUniqueInput {
  id: Int
  addressId: Int
  orderId: Int
  AND: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  NOT: [ShippingWhereInput!]
  logisticName: StringFilter
  deliveryDate: DateTimeNullableFilter
  shippingStatus: EnumShippingStatusFilter
  courier: StringNullableFilter
  estimatedTime: StringNullableFilter
  trackingNo: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  order: OrderRelationFilter
}

input AddressCreateOrConnectWithoutSchoolInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutSchoolInput!
}

input SchoolCreateOrConnectWithoutStudentsInput {
  where: SchoolWhereUniqueInput!
  create: SchoolCreateWithoutStudentsInput!
}

input UserCreateOrConnectWithoutReferredUsersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutReferredUsersInput!
}

input UserCreateOrConnectWithoutProgramsCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProgramsCreatedInput!
}

input UserCreateNestedManyWithoutProgramsParticipationInput {
  create: [UserCreateWithoutProgramsParticipationInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProgramsParticipationInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutProgramsParticipationInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProgramsParticipationInput!
}

input ProgramCategoryCreateNestedOneWithoutProgramsInput {
  create: ProgramCategoryCreateWithoutProgramsInput
  connectOrCreate: ProgramCategoryCreateOrConnectWithoutProgramsInput
  connect: ProgramCategoryWhereUniqueInput
}

input ProgramCategoryCreateWithoutProgramsInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProgramCategoryCreateOrConnectWithoutProgramsInput {
  where: ProgramCategoryWhereUniqueInput!
  create: ProgramCategoryCreateWithoutProgramsInput!
}

input ProgramCategoryWhereUniqueInput {
  id: Int
  AND: [ProgramCategoryWhereInput!]
  OR: [ProgramCategoryWhereInput!]
  NOT: [ProgramCategoryWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  programs: ProgramListRelationFilter
}

input ProgramCreateOrConnectWithoutImagesInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutImagesInput!
}

input ProgramWhereUniqueInput {
  id: Int
  createdById: String
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  name: StringFilter
  startDate: DateTimeFilter
  dueDate: DateTimeNullableFilter
  description: StringFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Images: ImagesListRelationFilter
  createdBy: UserRelationFilter
  participant: UserListRelationFilter
  category: ProgramCategoryRelationFilter
}

input ProjectCreateNestedOneWithoutImagesInput {
  create: ProjectCreateWithoutImagesInput
  connectOrCreate: ProjectCreateOrConnectWithoutImagesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutImagesInput {
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Int!
  currentAmount: Float!
  minimumInvestment: Int!
  maxInvestor: Int!
  createdAt: DateTime
  updatedAt: DateTime
  investors: UserCreateNestedManyWithoutProjectsInvestmentInput
  account: AccountCreateNestedOneWithoutProjectInput!
}

input AccountCreateNestedOneWithoutProjectInput {
  create: AccountCreateWithoutProjectInput
  connectOrCreate: AccountCreateOrConnectWithoutProjectInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutProjectInput {
  accountNumber: Int
  name: String!
  balance: Float
  createdAt: DateTime
  updatedAt: DateTime
  accountCategory: AccountCategory!
  user: UserCreateNestedOneWithoutAccountsInput!
  transactions: TransactionCreateNestedManyWithoutAccountInput
  bankAccount: BankCreateNestedOneWithoutAccountInput
}

input TransactionCreateNestedManyWithoutAccountInput {
  create: [TransactionCreateWithoutAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutAccountInput!]
  createMany: TransactionCreateManyAccountInputEnvelope
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutAccountInput {
  amount: Float!
  status: TransactionStatus!
  transactionType: TransactionType!
  transactionCategory: TransactionCategory!
  currentBalance: Float!
  createdAt: DateTime
  User: UserCreateNestedOneWithoutTransactionsInput!
  payment: PaymentCreateNestedOneWithoutTransactionInput
}

input PaymentCreateNestedOneWithoutTransactionInput {
  create: PaymentCreateWithoutTransactionInput
  connectOrCreate: PaymentCreateOrConnectWithoutTransactionInput
  connect: PaymentWhereUniqueInput
}

input PaymentCreateWithoutTransactionInput {
  adminFee: Float!
  totalPayment: Float!
  createdAt: DateTime
  order: OrderCreateNestedOneWithoutPaymentsInput!
  confirmation: PaymentConfirmationCreateNestedOneWithoutPaymentInput
}

input OrderCreateNestedOneWithoutPaymentsInput {
  create: OrderCreateWithoutPaymentsInput
  connectOrCreate: OrderCreateOrConnectWithoutPaymentsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutPaymentsInput {
  status: TransactionStatus!
  shippingId: Int
  isFullPaid: Boolean!
  cost: Float!
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  items: ItemCreateNestedManyWithoutOrderInput
  shipping: ShippingCreateNestedOneWithoutOrderInput
}

input ShippingCreateNestedOneWithoutOrderInput {
  create: ShippingCreateWithoutOrderInput
  connectOrCreate: ShippingCreateOrConnectWithoutOrderInput
  connect: ShippingWhereUniqueInput
}

input ShippingCreateWithoutOrderInput {
  logisticName: String!
  deliveryDate: DateTime
  shippingStatus: ShippingStatus!
  courier: String
  estimatedTime: String
  trackingNo: String
  createdAt: DateTime
  updatedAt: DateTime
  address: AddressCreateNestedOneWithoutShippingInput!
}

input AddressCreateNestedOneWithoutShippingInput {
  create: AddressCreateWithoutShippingInput
  connectOrCreate: AddressCreateOrConnectWithoutShippingInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutShippingInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
  user: UserCreateNestedOneWithoutAddressInput
  hotel: HotelCreateNestedOneWithoutAddressInput
  school: SchoolCreateNestedOneWithoutAddressInput
}

input AddressCreateOrConnectWithoutShippingInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutShippingInput!
}

input ShippingCreateOrConnectWithoutOrderInput {
  where: ShippingWhereUniqueInput!
  create: ShippingCreateWithoutOrderInput!
}

input OrderCreateOrConnectWithoutPaymentsInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutPaymentsInput!
}

input PaymentCreateOrConnectWithoutTransactionInput {
  where: PaymentWhereUniqueInput!
  create: PaymentCreateWithoutTransactionInput!
}

input TransactionCreateOrConnectWithoutAccountInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutAccountInput!
}

input TransactionCreateManyAccountInputEnvelope {
  data: [TransactionCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyAccountInput {
  id: Int
  amount: Float!
  status: TransactionStatus!
  transactionType: TransactionType!
  transactionCategory: TransactionCategory!
  currentBalance: Float!
  userId: String!
  createdAt: DateTime
}

input AccountCreateOrConnectWithoutProjectInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutProjectInput!
}

input ProjectCreateOrConnectWithoutImagesInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutImagesInput!
}

input ImagesCreateOrConnectWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutHotelImageInput!
}

input ImagesCreateManyHotelImageInputEnvelope {
  data: [ImagesCreateManyHotelImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyHotelImageInput {
  id: Int
  fileType: FileType!
  filesize: Float!
  url: String!
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
  createdAt: DateTime
}

input HotelCreateOrConnectWithoutAddressInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutAddressInput!
}

input AddressCreateOrConnectWithoutUserInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutUserInput!
}

input UserUpdateOneArgs {
  select: UserSelect
  include: UserSelect
  data: UserUpdateInput!
  where: UserWhereUniqueInput!
}

input UserUpdateInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input EnumUserTypeFieldUpdateOperationsInput {
  set: UserType
}

input EnumThemeFieldUpdateOperationsInput {
  set: Theme
}

input AddressUpdateOneRequiredWithoutUserNestedInput {
  create: AddressCreateWithoutUserInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  upsert: AddressUpsertWithoutUserInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutUserInput
}

input AddressUpsertWithoutUserInput {
  update: AddressUpdateWithoutUserInput!
  create: AddressCreateWithoutUserInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutUserInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input CityUpdateOneRequiredWithoutAddressNestedInput {
  create: CityCreateWithoutAddressInput
  connectOrCreate: CityCreateOrConnectWithoutAddressInput
  upsert: CityUpsertWithoutAddressInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutAddressInput
}

input CityUpsertWithoutAddressInput {
  update: CityUpdateWithoutAddressInput!
  create: CityCreateWithoutAddressInput!
  where: CityWhereInput
}

input CityUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
}

input CityUpdateToOneWithWhereWithoutAddressInput {
  where: CityWhereInput
  data: CityUpdateWithoutAddressInput!
}

input DistrictUpdateOneRequiredWithoutAddressNestedInput {
  create: DistrictCreateWithoutAddressInput
  connectOrCreate: DistrictCreateOrConnectWithoutAddressInput
  upsert: DistrictUpsertWithoutAddressInput
  connect: DistrictWhereUniqueInput
  update: DistrictUpdateToOneWithWhereWithoutAddressInput
}

input DistrictUpsertWithoutAddressInput {
  update: DistrictUpdateWithoutAddressInput!
  create: DistrictCreateWithoutAddressInput!
  where: DistrictWhereInput
}

input DistrictUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
}

input DistrictUpdateToOneWithWhereWithoutAddressInput {
  where: DistrictWhereInput
  data: DistrictUpdateWithoutAddressInput!
}

input PostalCodeUpdateOneRequiredWithoutAddressNestedInput {
  create: PostalCodeCreateWithoutAddressInput
  connectOrCreate: PostalCodeCreateOrConnectWithoutAddressInput
  upsert: PostalCodeUpsertWithoutAddressInput
  connect: PostalCodeWhereUniqueInput
  update: PostalCodeUpdateToOneWithWhereWithoutAddressInput
}

input PostalCodeUpsertWithoutAddressInput {
  update: PostalCodeUpdateWithoutAddressInput!
  create: PostalCodeCreateWithoutAddressInput!
  where: PostalCodeWhereInput
}

input PostalCodeUpdateWithoutAddressInput {
  code: IntFieldUpdateOperationsInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input PostalCodeUpdateToOneWithWhereWithoutAddressInput {
  where: PostalCodeWhereInput
  data: PostalCodeUpdateWithoutAddressInput!
}

input HotelUpdateOneWithoutAddressNestedInput {
  create: HotelCreateWithoutAddressInput
  connectOrCreate: HotelCreateOrConnectWithoutAddressInput
  upsert: HotelUpsertWithoutAddressInput
  disconnect: HotelWhereInput
  delete: HotelWhereInput
  connect: HotelWhereUniqueInput
  update: HotelUpdateToOneWithWhereWithoutAddressInput
}

input HotelUpsertWithoutAddressInput {
  update: HotelUpdateWithoutAddressInput!
  create: HotelCreateWithoutAddressInput!
  where: HotelWhereInput
}

input HotelUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutHotelImageNestedInput
  checkIns: CheckInUpdateManyWithoutHotelNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input ImagesUpdateManyWithoutHotelImageNestedInput {
  create: [ImagesCreateWithoutHotelImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutHotelImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutHotelImageInput!]
  createMany: ImagesCreateManyHotelImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutHotelImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutHotelImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpsertWithWhereUniqueWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutHotelImageInput!
  create: ImagesCreateWithoutHotelImageInput!
}

input ImagesUpdateWithoutHotelImageInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  programImage: ProgramUpdateOneWithoutImagesNestedInput
  rewardImage: RewardUpdateOneWithoutImagesNestedInput
  projectImage: ProjectUpdateOneWithoutImagesNestedInput
}

input EnumFileTypeFieldUpdateOperationsInput {
  set: FileType
}

input ProgramUpdateOneWithoutImagesNestedInput {
  create: ProgramCreateWithoutImagesInput
  connectOrCreate: ProgramCreateOrConnectWithoutImagesInput
  upsert: ProgramUpsertWithoutImagesInput
  disconnect: ProgramWhereInput
  delete: ProgramWhereInput
  connect: ProgramWhereUniqueInput
  update: ProgramUpdateToOneWithWhereWithoutImagesInput
}

input ProgramUpsertWithoutImagesInput {
  update: ProgramUpdateWithoutImagesInput!
  create: ProgramCreateWithoutImagesInput!
  where: ProgramWhereInput
}

input ProgramUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutProgramsCreatedNestedInput
  participant: UserUpdateManyWithoutProgramsParticipationNestedInput
  category: ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input UserUpdateOneRequiredWithoutProgramsCreatedNestedInput {
  create: UserCreateWithoutProgramsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutProgramsCreatedInput
  upsert: UserUpsertWithoutProgramsCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutProgramsCreatedInput
}

input UserUpsertWithoutProgramsCreatedInput {
  update: UserUpdateWithoutProgramsCreatedInput!
  create: UserCreateWithoutProgramsCreatedInput!
  where: UserWhereInput
}

input UserUpdateWithoutProgramsCreatedInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateOneWithoutReferredUsersNestedInput {
  create: UserCreateWithoutReferredUsersInput
  connectOrCreate: UserCreateOrConnectWithoutReferredUsersInput
  upsert: UserUpsertWithoutReferredUsersInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutReferredUsersInput
}

input UserUpsertWithoutReferredUsersInput {
  update: UserUpdateWithoutReferredUsersInput!
  create: UserCreateWithoutReferredUsersInput!
  where: UserWhereInput
}

input UserUpdateWithoutReferredUsersInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input SchoolUpdateOneWithoutStudentsNestedInput {
  create: SchoolCreateWithoutStudentsInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  upsert: SchoolUpsertWithoutStudentsInput
  disconnect: SchoolWhereInput
  delete: SchoolWhereInput
  connect: SchoolWhereUniqueInput
  update: SchoolUpdateToOneWithWhereWithoutStudentsInput
}

input SchoolUpsertWithoutStudentsInput {
  update: SchoolUpdateWithoutStudentsInput!
  create: SchoolCreateWithoutStudentsInput!
  where: SchoolWhereInput
}

input SchoolUpdateWithoutStudentsInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutSchoolNestedInput
}

input AddressUpdateOneRequiredWithoutSchoolNestedInput {
  create: AddressCreateWithoutSchoolInput
  connectOrCreate: AddressCreateOrConnectWithoutSchoolInput
  upsert: AddressUpsertWithoutSchoolInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutSchoolInput
}

input AddressUpsertWithoutSchoolInput {
  update: AddressUpdateWithoutSchoolInput!
  create: AddressCreateWithoutSchoolInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutSchoolInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input UserUpdateOneWithoutAddressNestedInput {
  create: UserCreateWithoutAddressInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  upsert: UserUpsertWithoutAddressInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutAddressInput
}

input UserUpsertWithoutAddressInput {
  update: UserUpdateWithoutAddressInput!
  create: UserCreateWithoutAddressInput!
  where: UserWhereInput
}

input UserUpdateWithoutAddressInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateToOneWithWhereWithoutAddressInput {
  where: UserWhereInput
  data: UserUpdateWithoutAddressInput!
}

input ShippingUpdateOneWithoutAddressNestedInput {
  create: ShippingCreateWithoutAddressInput
  connectOrCreate: ShippingCreateOrConnectWithoutAddressInput
  upsert: ShippingUpsertWithoutAddressInput
  disconnect: ShippingWhereInput
  delete: ShippingWhereInput
  connect: ShippingWhereUniqueInput
  update: ShippingUpdateToOneWithWhereWithoutAddressInput
}

input ShippingUpsertWithoutAddressInput {
  update: ShippingUpdateWithoutAddressInput!
  create: ShippingCreateWithoutAddressInput!
  where: ShippingWhereInput
}

input ShippingUpdateWithoutAddressInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  shippingStatus: EnumShippingStatusFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutShippingNestedInput
}

input EnumShippingStatusFieldUpdateOperationsInput {
  set: ShippingStatus
}

input OrderUpdateOneRequiredWithoutShippingNestedInput {
  create: OrderCreateWithoutShippingInput
  connectOrCreate: OrderCreateOrConnectWithoutShippingInput
  upsert: OrderUpsertWithoutShippingInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateToOneWithWhereWithoutShippingInput
}

input OrderUpsertWithoutShippingInput {
  update: OrderUpdateWithoutShippingInput!
  create: OrderCreateWithoutShippingInput!
  where: OrderWhereInput
}

input OrderUpdateWithoutShippingInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  isFullPaid: BoolFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  items: ItemUpdateManyWithoutOrderNestedInput
  payments: PaymentUpdateManyWithoutOrderNestedInput
}

input EnumTransactionStatusFieldUpdateOperationsInput {
  set: TransactionStatus
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input UserUpdateOneRequiredWithoutOrdersNestedInput {
  create: UserCreateWithoutOrdersInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  upsert: UserUpsertWithoutOrdersInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutOrdersInput
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersInput!
  create: UserCreateWithoutOrdersInput!
  where: UserWhereInput
}

input UserUpdateWithoutOrdersInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateToOneWithWhereWithoutOrdersInput {
  where: UserWhereInput
  data: UserUpdateWithoutOrdersInput!
}

input ItemUpdateManyWithoutOrderNestedInput {
  create: [ItemCreateWithoutOrderInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutOrderInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutOrderInput!]
  createMany: ItemCreateManyOrderInputEnvelope
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  connect: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [ItemUpdateManyWithWhereWithoutOrderInput!]
  deleteMany: [ItemScalarWhereInput!]
}

input ItemUpsertWithWhereUniqueWithoutOrderInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutOrderInput!
  create: ItemCreateWithoutOrderInput!
}

input ItemUpdateWithoutOrderInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  qty: IntFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpdateWithWhereUniqueWithoutOrderInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutOrderInput!
}

input ItemUpdateManyWithWhereWithoutOrderInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyMutationInput!
}

input ItemScalarWhereInput {
  AND: [ItemScalarWhereInput!]
  OR: [ItemScalarWhereInput!]
  NOT: [ItemScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  qty: IntFilter
  userRole: EnumUserRoleFilter
  orderId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ItemUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  qty: IntFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentUpdateManyWithoutOrderNestedInput {
  create: [PaymentCreateWithoutOrderInput!]
  connectOrCreate: [PaymentCreateOrConnectWithoutOrderInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutOrderInput!]
  createMany: PaymentCreateManyOrderInputEnvelope
  set: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  connect: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [PaymentUpdateManyWithWhereWithoutOrderInput!]
  deleteMany: [PaymentScalarWhereInput!]
}

input PaymentUpsertWithWhereUniqueWithoutOrderInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutOrderInput!
  create: PaymentCreateWithoutOrderInput!
}

input PaymentUpdateWithoutOrderInput {
  adminFee: FloatFieldUpdateOperationsInput
  totalPayment: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  transaction: TransactionUpdateOneRequiredWithoutPaymentNestedInput
  confirmation: PaymentConfirmationUpdateOneWithoutPaymentNestedInput
}

input TransactionUpdateOneRequiredWithoutPaymentNestedInput {
  create: TransactionCreateWithoutPaymentInput
  connectOrCreate: TransactionCreateOrConnectWithoutPaymentInput
  upsert: TransactionUpsertWithoutPaymentInput
  connect: TransactionWhereUniqueInput
  update: TransactionUpdateToOneWithWhereWithoutPaymentInput
}

input TransactionUpsertWithoutPaymentInput {
  update: TransactionUpdateWithoutPaymentInput!
  create: TransactionCreateWithoutPaymentInput!
  where: TransactionWhereInput
}

input TransactionUpdateWithoutPaymentInput {
  amount: FloatFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  transactionType: EnumTransactionTypeFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  currentBalance: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutTransactionsNestedInput
  account: AccountUpdateOneRequiredWithoutTransactionsNestedInput
}

input EnumTransactionTypeFieldUpdateOperationsInput {
  set: TransactionType
}

input EnumTransactionCategoryFieldUpdateOperationsInput {
  set: TransactionCategory
}

input UserUpdateOneRequiredWithoutTransactionsNestedInput {
  create: UserCreateWithoutTransactionsInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionsInput
  upsert: UserUpsertWithoutTransactionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutTransactionsInput
}

input UserUpsertWithoutTransactionsInput {
  update: UserUpdateWithoutTransactionsInput!
  create: UserCreateWithoutTransactionsInput!
  where: UserWhereInput
}

input UserUpdateWithoutTransactionsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateToOneWithWhereWithoutTransactionsInput {
  where: UserWhereInput
  data: UserUpdateWithoutTransactionsInput!
}

input AccountUpdateOneRequiredWithoutTransactionsNestedInput {
  create: AccountCreateWithoutTransactionsInput
  connectOrCreate: AccountCreateOrConnectWithoutTransactionsInput
  upsert: AccountUpsertWithoutTransactionsInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutTransactionsInput
}

input AccountUpsertWithoutTransactionsInput {
  update: AccountUpdateWithoutTransactionsInput!
  create: AccountCreateWithoutTransactionsInput!
  where: AccountWhereInput
}

input AccountUpdateWithoutTransactionsInput {
  accountNumber: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
  project: ProjectUpdateOneWithoutAccountNestedInput
  bankAccount: BankUpdateOneWithoutAccountNestedInput
}

input EnumAccountCategoryFieldUpdateOperationsInput {
  set: AccountCategory
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  create: UserCreateWithoutAccountsInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
}

input UserUpsertWithoutAccountsInput {
  update: UserUpdateWithoutAccountsInput!
  create: UserCreateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAccountsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  where: UserWhereInput
  data: UserUpdateWithoutAccountsInput!
}

input ProjectUpdateOneWithoutAccountNestedInput {
  create: ProjectCreateWithoutAccountInput
  connectOrCreate: ProjectCreateOrConnectWithoutAccountInput
  upsert: ProjectUpsertWithoutAccountInput
  disconnect: ProjectWhereInput
  delete: ProjectWhereInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateToOneWithWhereWithoutAccountInput
}

input ProjectUpsertWithoutAccountInput {
  update: ProjectUpdateWithoutAccountInput!
  create: ProjectCreateWithoutAccountInput!
  where: ProjectWhereInput
}

input ProjectUpdateWithoutAccountInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: IntFieldUpdateOperationsInput
  currentAmount: FloatFieldUpdateOperationsInput
  minimumInvestment: IntFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutProjectImageNestedInput
  investors: UserUpdateManyWithoutProjectsInvestmentNestedInput
}

input EnumProjectCategoryFieldUpdateOperationsInput {
  set: ProjectCategory
}

input ImagesUpdateManyWithoutProjectImageNestedInput {
  create: [ImagesCreateWithoutProjectImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProjectImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutProjectImageInput!]
  createMany: ImagesCreateManyProjectImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutProjectImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutProjectImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpsertWithWhereUniqueWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutProjectImageInput!
  create: ImagesCreateWithoutProjectImageInput!
}

input ImagesUpdateWithoutProjectImageInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  hotelImage: HotelUpdateOneWithoutImagesNestedInput
  programImage: ProgramUpdateOneWithoutImagesNestedInput
  rewardImage: RewardUpdateOneWithoutImagesNestedInput
}

input HotelUpdateOneWithoutImagesNestedInput {
  create: HotelCreateWithoutImagesInput
  connectOrCreate: HotelCreateOrConnectWithoutImagesInput
  upsert: HotelUpsertWithoutImagesInput
  disconnect: HotelWhereInput
  delete: HotelWhereInput
  connect: HotelWhereUniqueInput
  update: HotelUpdateToOneWithWhereWithoutImagesInput
}

input HotelUpsertWithoutImagesInput {
  update: HotelUpdateWithoutImagesInput!
  create: HotelCreateWithoutImagesInput!
  where: HotelWhereInput
}

input HotelUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutHotelNestedInput
  checkIns: CheckInUpdateManyWithoutHotelNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input AddressUpdateOneRequiredWithoutHotelNestedInput {
  create: AddressCreateWithoutHotelInput
  connectOrCreate: AddressCreateOrConnectWithoutHotelInput
  upsert: AddressUpsertWithoutHotelInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutHotelInput
}

input AddressUpsertWithoutHotelInput {
  update: AddressUpdateWithoutHotelInput!
  create: AddressCreateWithoutHotelInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutHotelInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input SchoolUpdateOneWithoutAddressNestedInput {
  create: SchoolCreateWithoutAddressInput
  connectOrCreate: SchoolCreateOrConnectWithoutAddressInput
  upsert: SchoolUpsertWithoutAddressInput
  disconnect: SchoolWhereInput
  delete: SchoolWhereInput
  connect: SchoolWhereUniqueInput
  update: SchoolUpdateToOneWithWhereWithoutAddressInput
}

input SchoolUpsertWithoutAddressInput {
  update: SchoolUpdateWithoutAddressInput!
  create: SchoolCreateWithoutAddressInput!
  where: SchoolWhereInput
}

input SchoolUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  students: UserUpdateManyWithoutSchoolNestedInput
}

input UserUpdateManyWithoutSchoolNestedInput {
  create: [UserCreateWithoutSchoolInput!]
  connectOrCreate: [UserCreateOrConnectWithoutSchoolInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSchoolInput!]
  createMany: UserCreateManySchoolInputEnvelope
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [UserUpdateManyWithWhereWithoutSchoolInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutSchoolInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSchoolInput!
  create: UserCreateWithoutSchoolInput!
}

input UserUpdateWithoutSchoolInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
}

input UserUpdateWithWhereUniqueWithoutSchoolInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSchoolInput!
}

input UserUpdateManyWithWhereWithoutSchoolInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  firstName: StringFilter
  lastName: StringNullableFilter
  email: StringFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  whatsappNumber: StringFilter
  password: StringFilter
  theme: EnumThemeFilter
}

input UserUpdateManyMutationInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
}

input SchoolUpdateToOneWithWhereWithoutAddressInput {
  where: SchoolWhereInput
  data: SchoolUpdateWithoutAddressInput!
}

input AddressUpdateToOneWithWhereWithoutHotelInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutHotelInput!
}

input CheckInUpdateManyWithoutHotelNestedInput {
  create: [CheckInCreateWithoutHotelInput!]
  connectOrCreate: [CheckInCreateOrConnectWithoutHotelInput!]
  upsert: [CheckInUpsertWithWhereUniqueWithoutHotelInput!]
  createMany: CheckInCreateManyHotelInputEnvelope
  set: [CheckInWhereUniqueInput!]
  disconnect: [CheckInWhereUniqueInput!]
  delete: [CheckInWhereUniqueInput!]
  connect: [CheckInWhereUniqueInput!]
  update: [CheckInUpdateWithWhereUniqueWithoutHotelInput!]
  updateMany: [CheckInUpdateManyWithWhereWithoutHotelInput!]
  deleteMany: [CheckInScalarWhereInput!]
}

input CheckInUpsertWithWhereUniqueWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  update: CheckInUpdateWithoutHotelInput!
  create: CheckInCreateWithoutHotelInput!
}

input CheckInUpdateWithoutHotelInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCheckInsNestedInput
}

input UserUpdateOneRequiredWithoutCheckInsNestedInput {
  create: UserCreateWithoutCheckInsInput
  connectOrCreate: UserCreateOrConnectWithoutCheckInsInput
  upsert: UserUpsertWithoutCheckInsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutCheckInsInput
}

input UserUpsertWithoutCheckInsInput {
  update: UserUpdateWithoutCheckInsInput!
  create: UserCreateWithoutCheckInsInput!
  where: UserWhereInput
}

input UserUpdateWithoutCheckInsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateToOneWithWhereWithoutCheckInsInput {
  where: UserWhereInput
  data: UserUpdateWithoutCheckInsInput!
}

input CheckInUpdateWithWhereUniqueWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  data: CheckInUpdateWithoutHotelInput!
}

input CheckInUpdateManyWithWhereWithoutHotelInput {
  where: CheckInScalarWhereInput!
  data: CheckInUpdateManyMutationInput!
}

input CheckInScalarWhereInput {
  AND: [CheckInScalarWhereInput!]
  OR: [CheckInScalarWhereInput!]
  NOT: [CheckInScalarWhereInput!]
  id: IntFilter
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CheckInUpdateManyMutationInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutHotelsCreatedNestedInput {
  create: UserCreateWithoutHotelsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutHotelsCreatedInput
  upsert: UserUpsertWithoutHotelsCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutHotelsCreatedInput
}

input UserUpsertWithoutHotelsCreatedInput {
  update: UserUpdateWithoutHotelsCreatedInput!
  create: UserCreateWithoutHotelsCreatedInput!
  where: UserWhereInput
}

input UserUpdateWithoutHotelsCreatedInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateToOneWithWhereWithoutHotelsCreatedInput {
  where: UserWhereInput
  data: UserUpdateWithoutHotelsCreatedInput!
}

input HotelUpdateToOneWithWhereWithoutImagesInput {
  where: HotelWhereInput
  data: HotelUpdateWithoutImagesInput!
}

input RewardUpdateOneWithoutImagesNestedInput {
  create: RewardCreateWithoutImagesInput
  connectOrCreate: RewardCreateOrConnectWithoutImagesInput
  upsert: RewardUpsertWithoutImagesInput
  disconnect: RewardWhereInput
  delete: RewardWhereInput
  connect: RewardWhereUniqueInput
  update: RewardUpdateToOneWithWhereWithoutImagesInput
}

input RewardUpsertWithoutImagesInput {
  update: RewardUpdateWithoutImagesInput!
  create: RewardCreateWithoutImagesInput!
  where: RewardWhereInput
}

input RewardUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  pointCost: FloatFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  claimers: UserUpdateManyWithoutClaimedRewardsNestedInput
}

input UserUpdateManyWithoutClaimedRewardsNestedInput {
  create: [UserCreateWithoutClaimedRewardsInput!]
  connectOrCreate: [UserCreateOrConnectWithoutClaimedRewardsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutClaimedRewardsInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutClaimedRewardsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutClaimedRewardsInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutClaimedRewardsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutClaimedRewardsInput!
  create: UserCreateWithoutClaimedRewardsInput!
}

input UserUpdateWithoutClaimedRewardsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateWithWhereUniqueWithoutClaimedRewardsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutClaimedRewardsInput!
}

input UserUpdateManyWithWhereWithoutClaimedRewardsInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input RewardUpdateToOneWithWhereWithoutImagesInput {
  where: RewardWhereInput
  data: RewardUpdateWithoutImagesInput!
}

input ImagesUpdateWithWhereUniqueWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutProjectImageInput!
}

input ImagesUpdateManyWithWhereWithoutProjectImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input ImagesScalarWhereInput {
  AND: [ImagesScalarWhereInput!]
  OR: [ImagesScalarWhereInput!]
  NOT: [ImagesScalarWhereInput!]
  id: IntFilter
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
}

input ImagesUpdateManyMutationInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithoutProjectsInvestmentNestedInput {
  create: [UserCreateWithoutProjectsInvestmentInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProjectsInvestmentInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsInvestmentInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsInvestmentInput!]
  updateMany: [UserUpdateManyWithWhereWithoutProjectsInvestmentInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutProjectsInvestmentInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectsInvestmentInput!
  create: UserCreateWithoutProjectsInvestmentInput!
}

input UserUpdateWithoutProjectsInvestmentInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateWithWhereUniqueWithoutProjectsInvestmentInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectsInvestmentInput!
}

input UserUpdateManyWithWhereWithoutProjectsInvestmentInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input ProjectUpdateToOneWithWhereWithoutAccountInput {
  where: ProjectWhereInput
  data: ProjectUpdateWithoutAccountInput!
}

input BankUpdateOneWithoutAccountNestedInput {
  create: BankCreateWithoutAccountInput
  connectOrCreate: BankCreateOrConnectWithoutAccountInput
  upsert: BankUpsertWithoutAccountInput
  disconnect: BankWhereInput
  delete: BankWhereInput
  connect: BankWhereUniqueInput
  update: BankUpdateToOneWithWhereWithoutAccountInput
}

input BankUpsertWithoutAccountInput {
  update: BankUpdateWithoutAccountInput!
  create: BankCreateWithoutAccountInput!
  where: BankWhereInput
}

input BankUpdateWithoutAccountInput {
  name: StringFieldUpdateOperationsInput
  logoUrl: StringFieldUpdateOperationsInput
  accountNumber: IntFieldUpdateOperationsInput
}

input BankUpdateToOneWithWhereWithoutAccountInput {
  where: BankWhereInput
  data: BankUpdateWithoutAccountInput!
}

input AccountUpdateToOneWithWhereWithoutTransactionsInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutTransactionsInput!
}

input TransactionUpdateToOneWithWhereWithoutPaymentInput {
  where: TransactionWhereInput
  data: TransactionUpdateWithoutPaymentInput!
}

input PaymentConfirmationUpdateOneWithoutPaymentNestedInput {
  create: PaymentConfirmationCreateWithoutPaymentInput
  connectOrCreate: PaymentConfirmationCreateOrConnectWithoutPaymentInput
  upsert: PaymentConfirmationUpsertWithoutPaymentInput
  disconnect: PaymentConfirmationWhereInput
  delete: PaymentConfirmationWhereInput
  connect: PaymentConfirmationWhereUniqueInput
  update: PaymentConfirmationUpdateToOneWithWhereWithoutPaymentInput
}

input PaymentConfirmationUpsertWithoutPaymentInput {
  update: PaymentConfirmationUpdateWithoutPaymentInput!
  create: PaymentConfirmationCreateWithoutPaymentInput!
  where: PaymentConfirmationWhereInput
}

input PaymentConfirmationUpdateWithoutPaymentInput {
  ProofUrl: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentConfirmationUpdateToOneWithWhereWithoutPaymentInput {
  where: PaymentConfirmationWhereInput
  data: PaymentConfirmationUpdateWithoutPaymentInput!
}

input PaymentUpdateWithWhereUniqueWithoutOrderInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutOrderInput!
}

input PaymentUpdateManyWithWhereWithoutOrderInput {
  where: PaymentScalarWhereInput!
  data: PaymentUpdateManyMutationInput!
}

input PaymentScalarWhereInput {
  AND: [PaymentScalarWhereInput!]
  OR: [PaymentScalarWhereInput!]
  NOT: [PaymentScalarWhereInput!]
  id: IntFilter
  adminFee: FloatFilter
  totalPayment: FloatFilter
  orderId: IntFilter
  transactionId: IntFilter
  createdAt: DateTimeFilter
}

input PaymentUpdateManyMutationInput {
  adminFee: FloatFieldUpdateOperationsInput
  totalPayment: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateToOneWithWhereWithoutShippingInput {
  where: OrderWhereInput
  data: OrderUpdateWithoutShippingInput!
}

input ShippingUpdateToOneWithWhereWithoutAddressInput {
  where: ShippingWhereInput
  data: ShippingUpdateWithoutAddressInput!
}

input AddressUpdateToOneWithWhereWithoutSchoolInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutSchoolInput!
}

input SchoolUpdateToOneWithWhereWithoutStudentsInput {
  where: SchoolWhereInput
  data: SchoolUpdateWithoutStudentsInput!
}

input UserUpdateToOneWithWhereWithoutReferredUsersInput {
  where: UserWhereInput
  data: UserUpdateWithoutReferredUsersInput!
}

input UserUpdateToOneWithWhereWithoutProgramsCreatedInput {
  where: UserWhereInput
  data: UserUpdateWithoutProgramsCreatedInput!
}

input UserUpdateManyWithoutProgramsParticipationNestedInput {
  create: [UserCreateWithoutProgramsParticipationInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProgramsParticipationInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProgramsParticipationInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProgramsParticipationInput!]
  updateMany: [UserUpdateManyWithWhereWithoutProgramsParticipationInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProgramsParticipationInput!
  create: UserCreateWithoutProgramsParticipationInput!
}

input UserUpdateWithoutProgramsParticipationInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateWithWhereUniqueWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProgramsParticipationInput!
}

input UserUpdateManyWithWhereWithoutProgramsParticipationInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput {
  create: ProgramCategoryCreateWithoutProgramsInput
  connectOrCreate: ProgramCategoryCreateOrConnectWithoutProgramsInput
  upsert: ProgramCategoryUpsertWithoutProgramsInput
  connect: ProgramCategoryWhereUniqueInput
  update: ProgramCategoryUpdateToOneWithWhereWithoutProgramsInput
}

input ProgramCategoryUpsertWithoutProgramsInput {
  update: ProgramCategoryUpdateWithoutProgramsInput!
  create: ProgramCategoryCreateWithoutProgramsInput!
  where: ProgramCategoryWhereInput
}

input ProgramCategoryUpdateWithoutProgramsInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramCategoryUpdateToOneWithWhereWithoutProgramsInput {
  where: ProgramCategoryWhereInput
  data: ProgramCategoryUpdateWithoutProgramsInput!
}

input ProgramUpdateToOneWithWhereWithoutImagesInput {
  where: ProgramWhereInput
  data: ProgramUpdateWithoutImagesInput!
}

input ProjectUpdateOneWithoutImagesNestedInput {
  create: ProjectCreateWithoutImagesInput
  connectOrCreate: ProjectCreateOrConnectWithoutImagesInput
  upsert: ProjectUpsertWithoutImagesInput
  disconnect: ProjectWhereInput
  delete: ProjectWhereInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateToOneWithWhereWithoutImagesInput
}

input ProjectUpsertWithoutImagesInput {
  update: ProjectUpdateWithoutImagesInput!
  create: ProjectCreateWithoutImagesInput!
  where: ProjectWhereInput
}

input ProjectUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: IntFieldUpdateOperationsInput
  currentAmount: FloatFieldUpdateOperationsInput
  minimumInvestment: IntFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  investors: UserUpdateManyWithoutProjectsInvestmentNestedInput
  account: AccountUpdateOneRequiredWithoutProjectNestedInput
}

input AccountUpdateOneRequiredWithoutProjectNestedInput {
  create: AccountCreateWithoutProjectInput
  connectOrCreate: AccountCreateOrConnectWithoutProjectInput
  upsert: AccountUpsertWithoutProjectInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutProjectInput
}

input AccountUpsertWithoutProjectInput {
  update: AccountUpdateWithoutProjectInput!
  create: AccountCreateWithoutProjectInput!
  where: AccountWhereInput
}

input AccountUpdateWithoutProjectInput {
  accountNumber: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
  transactions: TransactionUpdateManyWithoutAccountNestedInput
  bankAccount: BankUpdateOneWithoutAccountNestedInput
}

input TransactionUpdateManyWithoutAccountNestedInput {
  create: [TransactionCreateWithoutAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutAccountInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutAccountInput!]
  createMany: TransactionCreateManyAccountInputEnvelope
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutAccountInput!]
  deleteMany: [TransactionScalarWhereInput!]
}

input TransactionUpsertWithWhereUniqueWithoutAccountInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutAccountInput!
  create: TransactionCreateWithoutAccountInput!
}

input TransactionUpdateWithoutAccountInput {
  amount: FloatFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  transactionType: EnumTransactionTypeFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  currentBalance: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutTransactionsNestedInput
  payment: PaymentUpdateOneWithoutTransactionNestedInput
}

input PaymentUpdateOneWithoutTransactionNestedInput {
  create: PaymentCreateWithoutTransactionInput
  connectOrCreate: PaymentCreateOrConnectWithoutTransactionInput
  upsert: PaymentUpsertWithoutTransactionInput
  disconnect: PaymentWhereInput
  delete: PaymentWhereInput
  connect: PaymentWhereUniqueInput
  update: PaymentUpdateToOneWithWhereWithoutTransactionInput
}

input PaymentUpsertWithoutTransactionInput {
  update: PaymentUpdateWithoutTransactionInput!
  create: PaymentCreateWithoutTransactionInput!
  where: PaymentWhereInput
}

input PaymentUpdateWithoutTransactionInput {
  adminFee: FloatFieldUpdateOperationsInput
  totalPayment: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutPaymentsNestedInput
  confirmation: PaymentConfirmationUpdateOneWithoutPaymentNestedInput
}

input OrderUpdateOneRequiredWithoutPaymentsNestedInput {
  create: OrderCreateWithoutPaymentsInput
  connectOrCreate: OrderCreateOrConnectWithoutPaymentsInput
  upsert: OrderUpsertWithoutPaymentsInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateToOneWithWhereWithoutPaymentsInput
}

input OrderUpsertWithoutPaymentsInput {
  update: OrderUpdateWithoutPaymentsInput!
  create: OrderCreateWithoutPaymentsInput!
  where: OrderWhereInput
}

input OrderUpdateWithoutPaymentsInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  isFullPaid: BoolFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  items: ItemUpdateManyWithoutOrderNestedInput
  shipping: ShippingUpdateOneWithoutOrderNestedInput
}

input ShippingUpdateOneWithoutOrderNestedInput {
  create: ShippingCreateWithoutOrderInput
  connectOrCreate: ShippingCreateOrConnectWithoutOrderInput
  upsert: ShippingUpsertWithoutOrderInput
  disconnect: ShippingWhereInput
  delete: ShippingWhereInput
  connect: ShippingWhereUniqueInput
  update: ShippingUpdateToOneWithWhereWithoutOrderInput
}

input ShippingUpsertWithoutOrderInput {
  update: ShippingUpdateWithoutOrderInput!
  create: ShippingCreateWithoutOrderInput!
  where: ShippingWhereInput
}

input ShippingUpdateWithoutOrderInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  shippingStatus: EnumShippingStatusFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutShippingNestedInput
}

input AddressUpdateOneRequiredWithoutShippingNestedInput {
  create: AddressCreateWithoutShippingInput
  connectOrCreate: AddressCreateOrConnectWithoutShippingInput
  upsert: AddressUpsertWithoutShippingInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutShippingInput
}

input AddressUpsertWithoutShippingInput {
  update: AddressUpdateWithoutShippingInput!
  create: AddressCreateWithoutShippingInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutShippingInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
}

input AddressUpdateToOneWithWhereWithoutShippingInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutShippingInput!
}

input ShippingUpdateToOneWithWhereWithoutOrderInput {
  where: ShippingWhereInput
  data: ShippingUpdateWithoutOrderInput!
}

input OrderUpdateToOneWithWhereWithoutPaymentsInput {
  where: OrderWhereInput
  data: OrderUpdateWithoutPaymentsInput!
}

input PaymentUpdateToOneWithWhereWithoutTransactionInput {
  where: PaymentWhereInput
  data: PaymentUpdateWithoutTransactionInput!
}

input TransactionUpdateWithWhereUniqueWithoutAccountInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutAccountInput!
}

input TransactionUpdateManyWithWhereWithoutAccountInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyMutationInput!
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  id: IntFilter
  amount: FloatFilter
  status: EnumTransactionStatusFilter
  transactionType: EnumTransactionTypeFilter
  transactionCategory: EnumTransactionCategoryFilter
  currentBalance: FloatFilter
  userId: StringFilter
  accountId: IntFilter
  createdAt: DateTimeFilter
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  transactionType: EnumTransactionTypeFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  currentBalance: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateToOneWithWhereWithoutProjectInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutProjectInput!
}

input ProjectUpdateToOneWithWhereWithoutImagesInput {
  where: ProjectWhereInput
  data: ProjectUpdateWithoutImagesInput!
}

input ImagesUpdateWithWhereUniqueWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutHotelImageInput!
}

input ImagesUpdateManyWithWhereWithoutHotelImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input HotelUpdateToOneWithWhereWithoutAddressInput {
  where: HotelWhereInput
  data: HotelUpdateWithoutAddressInput!
}

input AddressUpdateToOneWithWhereWithoutUserInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutUserInput!
}